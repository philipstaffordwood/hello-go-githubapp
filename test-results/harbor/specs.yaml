apiVersion: v1
items:
- items:
  - apiVersion: v1
    data:
      ALLOW_OVERWRITE: "true"
      AUTH_ANONYMOUS_GET: "false"
      AWS_ACCESS_KEY_ID: minio
      BASIC_AUTH_USER: chart_controller
      CACHE: redis
      CACHE_REDIS_ADDR: harbor-redis:6379
      CACHE_REDIS_DB: "3"
      CHART_POST_FORM_FIELD_NAME: chart
      CONTEXT_PATH: ""
      DEBUG: "false"
      DEPTH: "1"
      DISABLE_API: "false"
      DISABLE_METRICS: "false"
      DISABLE_STATEFILES: "false"
      INDEX_LIMIT: "0"
      LOG_JSON: "true"
      MAX_STORAGE_OBJECTS: "0"
      MAX_UPLOAD_SIZE: "20971520"
      PORT: "9999"
      PROV_POST_FORM_FIELD_NAME: prov
      STORAGE: amazon
      STORAGE_AMAZON_BUCKET: harbor-blobs
      STORAGE_AMAZON_ENDPOINT: http://minio.minio.svc:9000
      STORAGE_AMAZON_REGION: us-east1
      TLS_CERT: ""
      TLS_KEY: ""
    kind: ConfigMap
    metadata:
      creationTimestamp: "2020-04-27T20:39:50Z"
      labels:
        app: harbor
      name: harbor-chartmuseum
      namespace: harbor
      resourceVersion: "3036"
      selfLink: /api/v1/namespaces/harbor/configmaps/harbor-chartmuseum
      uid: a1e3d9ef-c99d-42ec-9d88-78fa6c6e7c1b
  - apiVersion: v1
    data:
      _REDIS_URL: harbor-redis:6379,100,
      _REDIS_URL_REG: redis://harbor-redis:6379/2
      ADMIRAL_URL: NA
      CFG_EXPIRATION: "5"
      CHART_CACHE_DRIVER: redis
      CHART_REPOSITORY_URL: http://harbor-chartmuseum
      CLAIR_ADAPTER_URL: http://harbor-clair:8080
      CLAIR_DB: clair
      CLAIR_DB_HOST: postgres-harbor.postgres-operator.svc.cluster.local
      CLAIR_DB_PORT: "5432"
      CLAIR_DB_SSLMODE: disable
      CLAIR_DB_USERNAME: app
      CLAIR_HEALTH_CHECK_SERVER_URL: http://harbor-clair:6061
      CLAIR_URL: http://harbor-clair:6060
      CONFIG_PATH: /etc/core/app.conf
      CORE_URL: http://harbor-core
      DATABASE_TYPE: postgresql
      EXT_ENDPOINT: https://harbor.127.0.0.1.nip.io
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
      JOBSERVICE_URL: http://harbor-jobservice
      LOG_LEVEL: info
      NO_PROXY: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
      PORTAL_URL: http://harbor-portal
      POSTGRESQL_DATABASE: registry
      POSTGRESQL_HOST: postgres-harbor.postgres-operator.svc.cluster.local
      POSTGRESQL_MAX_IDLE_CONNS: "50"
      POSTGRESQL_MAX_OPEN_CONNS: "100"
      POSTGRESQL_PORT: "5432"
      POSTGRESQL_SSLMODE: disable
      POSTGRESQL_USERNAME: app
      REGISTRY_STORAGE_PROVIDER_NAME: s3
      REGISTRY_URL: http://harbor-registry:5000
      REGISTRYCTL_URL: http://harbor-registry:8080
      SYNC_REGISTRY: "false"
      TOKEN_SERVICE_URL: http://harbor-core/service/token
      WITH_CHARTMUSEUM: "true"
      WITH_CLAIR: "true"
      WITH_NOTARY: "false"
      app.conf: |
        appname = Harbor
        runmode = dev
        enablegzip = true

        [dev]
        httpport = 8080
        EnableXSRF = true
        XSRFKey = mTYZD8UBh4DstkpUSKTo85c4uRU4eGqJ1bXKvD9J
        XSRFExpire = 3600
    kind: ConfigMap
    metadata:
      creationTimestamp: "2020-04-27T20:39:50Z"
      labels:
        app: harbor
      name: harbor-core
      namespace: harbor
      resourceVersion: "3037"
      selfLink: /api/v1/namespaces/harbor/configmaps/harbor-core
      uid: 4a5d058f-daaa-45fb-912c-9c438aa43c41
  - apiVersion: v1
    data:
      config.yml: |
        protocol: "http"
        port: 8080
        worker_pool:
          workers: 10
          backend: "redis"
          redis_pool:
            redis_url: "harbor-redis:6379/1"
            namespace: "harbor_job_service_namespace"
        job_loggers:
          - name: "FILE"
            level: INFO
            settings: # Customized settings of logger
              base_dir: "/var/log/jobs"
            sweeper:
              duration: 14 #days
              settings: # Customized settings of sweeper
                work_dir: "/var/log/jobs"
        #Loggers for the job service
        loggers:
          - name: "STD_OUTPUT"
            level: "WARN"
    kind: ConfigMap
    metadata:
      creationTimestamp: "2020-04-27T20:39:50Z"
      labels:
        app: harbor
      name: harbor-jobservice
      namespace: harbor
      resourceVersion: "3038"
      selfLink: /api/v1/namespaces/harbor/configmaps/harbor-jobservice
      uid: 17d74e4a-5b6c-4ada-b47d-a5cc9aa39d7a
  - apiVersion: v1
    data:
      config.yml: |
        version: 0.1
        log:
          level: "warn"
          fields:
            service: registry
        storage:
          s3:
            region: us-east1
            bucket: harbor-blobs
            regionendpoint: http://minio.minio.svc:9000
            skipverify: true
          cache:
            layerinfo: redis
          maintenance:
            uploadpurging:
              enabled: false
          delete:
            enabled: true
          redirect:
            disable: false
        redis:
          addr: "harbor-redis:6379"
          db: 2
        http:
          relativeurls: false
          addr: :5000
          debug:
            addr: :5001
            prometheus:
              enabled: true
              path: "/metrics"
        auth:
          token:
            issuer: harbor-token-issuer
            realm: "https://harbor.127.0.0.1.nip.io/service/token"
            rootcertbundle: /etc/registry/root.crt
            service: harbor-registry
        validation:
          disabled: true
        notifications:
          endpoints:
            - name: harbor
              disabled: false
              url: http://harbor-core/service/notifications
              timeout: 3000ms
              threshold: 5
              backoff: 1s
              ignoredmediatypes:
                - application/vnd.docker.image.rootfs.diff.tar.gzip
                - application/vnd.docker.image.rootfs.foreign.diff.tar.gzip
                - application/vnd.oci.image.layer.v1.tar
                - application/vnd.oci.image.layer.v1.tar+gzip
                - application/vnd.oci.image.layer.v1.tar+zstd
                - application/vnd.oci.image.layer.nondistributable.v1.tar
                - application/vnd.oci.image.layer.nondistributable.v1.tar+gzip
                - application/vnd.oci.image.layer.nondistributable.v1.tar+zstd
                - application/octet-stream
      ctl-config.yml: |
        protocol: "http"
        port: 8080
        log_level: "warn"
    kind: ConfigMap
    metadata:
      creationTimestamp: "2020-04-27T20:39:50Z"
      labels:
        app: harbor
      name: harbor-registry
      namespace: harbor
      resourceVersion: "3039"
      selfLink: /api/v1/namespaces/harbor/configmaps/harbor-registry
      uid: 2dc66136-da55-48e2-8625-b22a03b852bd
  metadata: {}
- items:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      annotations:
        pv.kubernetes.io/bind-completed: "yes"
        pv.kubernetes.io/bound-by-controller: "yes"
        volume.beta.kubernetes.io/storage-provisioner: rancher.io/local-path
        volume.kubernetes.io/selected-node: kind-control-plane
      creationTimestamp: "2020-04-27T20:39:55Z"
      finalizers:
      - kubernetes.io/pvc-protection
      labels:
        app: harbor
        component: redis
      name: data-harbor-redis-0
      namespace: harbor
      resourceVersion: "3285"
      selfLink: /api/v1/namespaces/harbor/persistentvolumeclaims/data-harbor-redis-0
      uid: 6758ea9e-a557-47a9-bae0-6500c83ec7b3
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: local-path
      volumeMode: Filesystem
      volumeName: pvc-6758ea9e-a557-47a9-bae0-6500c83ec7b3
    status:
      accessModes:
      - ReadWriteOnce
      capacity:
        storage: 1Gi
      phase: Bound
  metadata: {}
- items:
  - apiVersion: v1
    kind: Pod
    metadata:
      annotations:
        cni.projectcalico.org/podIP: 100.200.82.29/32
      creationTimestamp: "2020-04-27T20:40:53Z"
      generateName: harbor-chartmuseum-54bd7fd995-
      labels:
        app: harbor
        component: chartmuseum
        pod-template-hash: 54bd7fd995
      name: harbor-chartmuseum-54bd7fd995-dfk9b
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: ReplicaSet
        name: harbor-chartmuseum-54bd7fd995
        uid: 5dd37414-2f9d-493c-ade5-083ab0b1c8f5
      resourceVersion: "4958"
      selfLink: /api/v1/namespaces/harbor/pods/harbor-chartmuseum-54bd7fd995-dfk9b
      uid: a7169f12-7919-4e4f-9013-85b83b79ff12
    spec:
      containers:
      - env:
        - name: BASIC_AUTH_PASS
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-core
        - name: STAKATER_HARBOR_CORE_SECRET
          value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
        - name: STAKATER_HARBOR_CHARTMUSEUM_CONFIGMAP
          value: f9cec16a3657790c115495c79fcc2087012d2040
        - name: STAKATER_HARBOR_CHARTMUSEUM_SECRET
          value: 76ad3b4aa7177cb52d5e1377420a8488a40d713b
        envFrom:
        - configMapRef:
            name: harbor-chartmuseum
        - secretRef:
            name: harbor-chartmuseum
        image: goharbor/chartmuseum-photon:v0.9.0-v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 9999
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: chartmuseum
        ports:
        - containerPort: 9999
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 9999
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /chart_storage
          name: chartmuseum-data
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: default-token-8cbmp
          readOnly: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      nodeName: kind-control-plane
      priority: 0
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 10000
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 300
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 300
      volumes:
      - emptyDir: {}
        name: chartmuseum-data
      - name: default-token-8cbmp
        secret:
          defaultMode: 420
          secretName: default-token-8cbmp
    status:
      conditions:
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:53Z"
        status: "True"
        type: Initialized
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:41:00Z"
        status: "True"
        type: Ready
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:41:00Z"
        status: "True"
        type: ContainersReady
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:53Z"
        status: "True"
        type: PodScheduled
      containerStatuses:
      - containerID: containerd://65a3543018eb293a9059475aa412fca574e8da5ac234af011f8a8a58cd5606ac
        image: docker.io/goharbor/chartmuseum-photon:v0.9.0-v1.10.0
        imageID: docker.io/goharbor/chartmuseum-photon@sha256:24aca3cbe7219967a0288f2a03ba349fec1d1cd77c9b4ff5211d28756c87d33a
        lastState: {}
        name: chartmuseum
        ready: true
        restartCount: 0
        state:
          running:
            startedAt: "2020-04-27T20:40:55Z"
      hostIP: 172.17.0.2
      phase: Running
      podIP: 100.200.82.29
      qosClass: BestEffort
      startTime: "2020-04-27T20:40:53Z"
  - apiVersion: v1
    kind: Pod
    metadata:
      annotations:
        cni.projectcalico.org/podIP: 100.200.82.19/32
      creationTimestamp: "2020-04-27T20:40:51Z"
      generateName: harbor-clair-57d49f7bb9-
      labels:
        app: harbor
        component: clair
        pod-template-hash: 57d49f7bb9
      name: harbor-clair-57d49f7bb9-9frw2
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: ReplicaSet
        name: harbor-clair-57d49f7bb9
        uid: e355fb9e-9c2a-42a5-8994-1d78230c6252
      resourceVersion: "5283"
      selfLink: /api/v1/namespaces/harbor/pods/harbor-clair-57d49f7bb9-9frw2
      uid: 131c1ea9-93a6-460c-944c-6f1813236fe2
    spec:
      containers:
      - args:
        - -log-level
        - warn
        env:
        - name: HTTP_PROXY
        - name: HTTPS_PROXY
        - name: NO_PROXY
          value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
        - name: STAKATER_HARBOR_CLAIR_SECRET
          value: a0730b0200d7696815d7081d8af36960d86d3084
        image: goharbor/clair-photon:v2.1.1-v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 6061
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: clair
        ports:
        - containerPort: 6060
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 6061
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/clair/config.yaml
          name: config
          subPath: config.yaml
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: default-token-8cbmp
          readOnly: true
      - env:
        - name: SCANNER_CLAIR_URL
          value: http://127.0.0.1:6060
        - name: SCANNER_STORE_REDIS_URL
          valueFrom:
            secretKeyRef:
              key: redis
              name: harbor-clair
        - name: SCANNER_CLAIR_DATABASE_URL
          valueFrom:
            secretKeyRef:
              key: database
              name: harbor-clair
        - name: SCANNER_LOG_LEVEL
          value: warn
        image: goharbor/clair-adapter-photon:v1.0.1-v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /probe/healthy
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: adapter
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /probe/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: default-token-8cbmp
          readOnly: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      nodeName: kind-control-plane
      priority: 0
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 10000
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 300
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 300
      volumes:
      - name: config
        secret:
          defaultMode: 420
          secretName: harbor-clair
      - name: default-token-8cbmp
        secret:
          defaultMode: 420
          secretName: default-token-8cbmp
    status:
      conditions:
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:51Z"
        status: "True"
        type: Initialized
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:41:30Z"
        status: "True"
        type: Ready
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:41:30Z"
        status: "True"
        type: ContainersReady
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:51Z"
        status: "True"
        type: PodScheduled
      containerStatuses:
      - containerID: containerd://e9ead6b360324f3acb5b44ff5b32d901db783b625482138ad84ca9731c61c608
        image: docker.io/goharbor/clair-adapter-photon:v1.0.1-v1.10.0
        imageID: docker.io/goharbor/clair-adapter-photon@sha256:bafc293fd765dbbad5ed3d57d771f0566e5d63a668213f1f61c469cbb199fca6
        lastState: {}
        name: adapter
        ready: true
        restartCount: 0
        state:
          running:
            startedAt: "2020-04-27T20:40:54Z"
      - containerID: containerd://14b42eb20feb0849f9e03fdc3623cdcb7bcbcf1565cb787edb1561509d263561
        image: docker.io/goharbor/clair-photon:v2.1.1-v1.10.0
        imageID: docker.io/goharbor/clair-photon@sha256:230de2ade2427d743fdedebf20409fa7a196af9d4ba4cc4a5efdfb7267288c41
        lastState: {}
        name: clair
        ready: true
        restartCount: 0
        state:
          running:
            startedAt: "2020-04-27T20:40:53Z"
      hostIP: 172.17.0.2
      phase: Running
      podIP: 100.200.82.19
      qosClass: BestEffort
      startTime: "2020-04-27T20:40:51Z"
  - apiVersion: v1
    kind: Pod
    metadata:
      annotations:
        cni.projectcalico.org/podIP: 100.200.82.38/32
      creationTimestamp: "2020-04-27T20:40:54Z"
      generateName: harbor-core-69fc9d9868-
      labels:
        app: harbor
        component: core
        pod-template-hash: 69fc9d9868
      name: harbor-core-69fc9d9868-vcwjm
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: ReplicaSet
        name: harbor-core-69fc9d9868
        uid: 8b1784fb-d098-41ba-aee5-e96d055b091f
      resourceVersion: "5230"
      selfLink: /api/v1/namespaces/harbor/pods/harbor-core-69fc9d9868-vcwjm
      uid: 26a28f00-0d09-4373-bef9-053b606e6b85
    spec:
      containers:
      - env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-core
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-jobservice
        - name: STAKATER_HARBOR_CORE_SECRET
          value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
        - name: STAKATER_HARBOR_CORE_CONFIGMAP
          value: e283939a3f24fe072caeb777b04d567d4c50bb29
        - name: STAKATER_HARBOR_INGRESS_SECRET
          value: 656aac349b3f9b6002ac5bd50d567f5d59ac3cb1
        - name: STAKATER_HARBOR_JOBSERVICE_SECRET
          value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
        envFrom:
        - configMapRef:
            name: harbor-core
        - secretRef:
            name: harbor-core
        image: goharbor/harbor-core:v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/ping
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: core
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/ping
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/core/app.conf
          name: config
          subPath: app.conf
        - mountPath: /etc/core/key
          name: secret-key
          subPath: key
        - mountPath: /etc/core/private_key.pem
          name: token-service-private-key
          subPath: tls.key
        - mountPath: /etc/core/ca
          name: ca-download
        - mountPath: /etc/core/token
          name: psc
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: default-token-8cbmp
          readOnly: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      nodeName: kind-control-plane
      priority: 0
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 10000
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 300
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 300
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: app.conf
            path: app.conf
          name: harbor-core
        name: config
      - name: secret-key
        secret:
          defaultMode: 420
          items:
          - key: secretKey
            path: key
          secretName: harbor-core
      - name: token-service-private-key
        secret:
          defaultMode: 420
          secretName: harbor-core
      - name: ca-download
        secret:
          defaultMode: 420
          secretName: harbor-ingress
      - emptyDir: {}
        name: psc
      - name: default-token-8cbmp
        secret:
          defaultMode: 420
          secretName: default-token-8cbmp
    status:
      conditions:
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:54Z"
        status: "True"
        type: Initialized
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:41:22Z"
        status: "True"
        type: Ready
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:41:22Z"
        status: "True"
        type: ContainersReady
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:54Z"
        status: "True"
        type: PodScheduled
      containerStatuses:
      - containerID: containerd://64e119d6fe551ce59100c15c65b282a451115fd769eda46ccb65d91990c7bba9
        image: docker.io/goharbor/harbor-core:v1.10.0
        imageID: docker.io/goharbor/harbor-core@sha256:a97d36e3b26b908dd6212500ed27f6d710042466d46e3585581b56f83029d885
        lastState: {}
        name: core
        ready: true
        restartCount: 0
        state:
          running:
            startedAt: "2020-04-27T20:40:56Z"
      hostIP: 172.17.0.2
      phase: Running
      podIP: 100.200.82.38
      qosClass: BestEffort
      startTime: "2020-04-27T20:40:54Z"
  - apiVersion: v1
    kind: Pod
    metadata:
      annotations:
        cni.projectcalico.org/podIP: 100.200.82.18/32
      creationTimestamp: "2020-04-27T20:40:53Z"
      generateName: harbor-jobservice-58484476cb-
      labels:
        app: harbor
        component: jobservice
        pod-template-hash: 58484476cb
      name: harbor-jobservice-58484476cb-9tvlv
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: ReplicaSet
        name: harbor-jobservice-58484476cb
        uid: c081b255-820e-4c82-a742-abcfcee8171a
      resourceVersion: "5873"
      selfLink: /api/v1/namespaces/harbor/pods/harbor-jobservice-58484476cb-9tvlv
      uid: d769aafe-650b-4ced-bcaa-1ba26b59738f
    spec:
      containers:
      - env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-core
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-jobservice
        - name: CORE_URL
          value: http://harbor-core
        - name: REGISTRY_CONTROLLER_URL
          value: http://harbor-registry:8080
        - name: LOG_LEVEL
          value: warn
        - name: HTTP_PROXY
        - name: HTTPS_PROXY
        - name: NO_PROXY
          value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
        - name: STAKATER_HARBOR_CORE_SECRET
          value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
        - name: STAKATER_HARBOR_JOBSERVICE_CONFIGMAP
          value: da779fafea89ebd5639aa87e7c2c8214ca7db649
        - name: STAKATER_HARBOR_JOBSERVICE_SECRET
          value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
        image: goharbor/harbor-jobservice:v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/v1/stats
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: jobservice
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/v1/stats
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/jobservice/config.yml
          name: jobservice-config
          subPath: config.yml
        - mountPath: /var/log/jobs
          name: job-logs
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: default-token-8cbmp
          readOnly: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      nodeName: kind-control-plane
      priority: 0
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 10000
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 300
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 300
      volumes:
      - configMap:
          defaultMode: 420
          name: harbor-jobservice
        name: jobservice-config
      - emptyDir: {}
        name: job-logs
      - name: default-token-8cbmp
        secret:
          defaultMode: 420
          secretName: default-token-8cbmp
    status:
      conditions:
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:53Z"
        status: "True"
        type: Initialized
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:43:18Z"
        status: "True"
        type: Ready
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:43:18Z"
        status: "True"
        type: ContainersReady
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:53Z"
        status: "True"
        type: PodScheduled
      containerStatuses:
      - containerID: containerd://10e6362224a5719c03bb20c56d21336619073206ecb05998520cfd57faa811d2
        image: docker.io/goharbor/harbor-jobservice:v1.10.0
        imageID: docker.io/goharbor/harbor-jobservice@sha256:7a4678b7e34dd18c530891bee63342fa8ffe0db6fb7fd8c580e093cbcd5e5f8a
        lastState: {}
        name: jobservice
        ready: true
        restartCount: 0
        state:
          running:
            startedAt: "2020-04-27T20:40:55Z"
      hostIP: 172.17.0.2
      phase: Running
      podIP: 100.200.82.18
      qosClass: BestEffort
      startTime: "2020-04-27T20:40:53Z"
  - apiVersion: v1
    kind: Pod
    metadata:
      annotations:
        cni.projectcalico.org/podIP: 100.200.82.37/32
      creationTimestamp: "2020-04-27T20:39:55Z"
      generateName: harbor-portal-6dbd9fcd57-
      labels:
        app: harbor
        component: portal
        pod-template-hash: 6dbd9fcd57
      name: harbor-portal-6dbd9fcd57-k5kf7
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: ReplicaSet
        name: harbor-portal-6dbd9fcd57
        uid: 446828f2-9767-42b4-8d97-6b2ebd06fbc7
      resourceVersion: "3465"
      selfLink: /api/v1/namespaces/harbor/pods/harbor-portal-6dbd9fcd57-k5kf7
      uid: 5255519b-f98e-4255-af79-5c8aa5a08359
    spec:
      containers:
      - image: goharbor/harbor-portal:v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: portal
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: default-token-8cbmp
          readOnly: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      nodeName: kind-control-plane
      priority: 0
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 300
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 300
      volumes:
      - name: default-token-8cbmp
        secret:
          defaultMode: 420
          secretName: default-token-8cbmp
    status:
      conditions:
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:39:55Z"
        status: "True"
        type: Initialized
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:13Z"
        status: "True"
        type: Ready
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:13Z"
        status: "True"
        type: ContainersReady
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:39:55Z"
        status: "True"
        type: PodScheduled
      containerStatuses:
      - containerID: containerd://6187627368913e7ab2e22faa21fa21f35124a233c07ed2395b35b15a3b22f5e0
        image: docker.io/goharbor/harbor-portal:v1.10.0
        imageID: docker.io/goharbor/harbor-portal@sha256:a143f4b76fbf8def8ca4cdd37be84bc3aaa0c018a4b8b272a25f0e7b78059553
        lastState: {}
        name: portal
        ready: true
        restartCount: 0
        state:
          running:
            startedAt: "2020-04-27T20:40:07Z"
      hostIP: 172.17.0.2
      phase: Running
      podIP: 100.200.82.37
      qosClass: BestEffort
      startTime: "2020-04-27T20:39:55Z"
  - apiVersion: v1
    kind: Pod
    metadata:
      annotations:
        cni.projectcalico.org/podIP: 100.200.82.41/32
      creationTimestamp: "2020-04-27T20:39:55Z"
      generateName: harbor-redis-
      labels:
        app: harbor
        component: redis
        controller-revision-hash: harbor-redis-5577d5747b
        statefulset.kubernetes.io/pod-name: harbor-redis-0
      name: harbor-redis-0
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: StatefulSet
        name: harbor-redis
        uid: 882b0fb7-891b-472e-8efc-fd80fd820759
      resourceVersion: "3575"
      selfLink: /api/v1/namespaces/harbor/pods/harbor-redis-0
      uid: dc7abaa5-d3d4-4a78-8ceb-d260b219fd1b
    spec:
      containers:
      - image: goharbor/redis-photon:v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 300
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 6379
          timeoutSeconds: 1
        name: redis
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 1
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 6379
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/redis
          name: data
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: default-token-8cbmp
          readOnly: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      hostname: harbor-redis-0
      nodeName: kind-control-plane
      priority: 0
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 999
      serviceAccount: default
      serviceAccountName: default
      subdomain: harbor-redis
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 300
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 300
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: data-harbor-redis-0
      - name: default-token-8cbmp
        secret:
          defaultMode: 420
          secretName: default-token-8cbmp
    status:
      conditions:
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:00Z"
        status: "True"
        type: Initialized
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:16Z"
        status: "True"
        type: Ready
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:16Z"
        status: "True"
        type: ContainersReady
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:00Z"
        status: "True"
        type: PodScheduled
      containerStatuses:
      - containerID: containerd://17b5f39ce95ffa53068f16d86da2c7db38f45ed4d449a021b416d55f88808fdb
        image: docker.io/goharbor/redis-photon:v1.10.0
        imageID: docker.io/goharbor/redis-photon@sha256:2d01e205a2bcab2fe41270669053103dac95cb950fe1bc08d2e92ee7f047a11f
        lastState: {}
        name: redis
        ready: true
        restartCount: 0
        state:
          running:
            startedAt: "2020-04-27T20:40:14Z"
      hostIP: 172.17.0.2
      phase: Running
      podIP: 100.200.82.41
      qosClass: BestEffort
      startTime: "2020-04-27T20:40:00Z"
  - apiVersion: v1
    kind: Pod
    metadata:
      annotations:
        cni.projectcalico.org/podIP: 100.200.82.31/32
      creationTimestamp: "2020-04-27T20:40:54Z"
      generateName: harbor-registry-c98dbc647-
      labels:
        app: harbor
        component: registry
        pod-template-hash: c98dbc647
      name: harbor-registry-c98dbc647-l22dg
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: ReplicaSet
        name: harbor-registry-c98dbc647
        uid: 31975279-ed67-439b-ab4b-435a0f951e76
      resourceVersion: "5036"
      selfLink: /api/v1/namespaces/harbor/pods/harbor-registry-c98dbc647-l22dg
      uid: ca8709b4-f162-4907-815a-11c049016085
    spec:
      containers:
      - args:
        - serve
        - /etc/registry/config.yml
        env:
        - name: STAKATER_HARBOR_CORE_SECRET
          value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
        - name: STAKATER_HARBOR_REGISTRY_CONFIGMAP
          value: a9d6a966a3cb00e2400f6e0797164310a1c0d17f
        - name: STAKATER_HARBOR_REGISTRY_SECRET
          value: 3bde361646c058ee555fc262793a2e0ec4367c0c
        envFrom:
        - secretRef:
            name: harbor-registry
        image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: registry
        ports:
        - containerPort: 5000
          protocol: TCP
        - containerPort: 5001
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /storage
          name: registry-data
        - mountPath: /etc/registry/root.crt
          name: registry-root-certificate
          subPath: tls.crt
        - mountPath: /etc/registry/config.yml
          name: registry-config
          subPath: config.yml
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: default-token-8cbmp
          readOnly: true
      - args:
        - serve
        - /etc/registry/config.yml
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-core
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-jobservice
        - name: STAKATER_HARBOR_JOBSERVICE_SECRET
          value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
        envFrom:
        - secretRef:
            name: harbor-registry
        image: goharbor/harbor-registryctl:v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: registryctl
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /storage
          name: registry-data
        - mountPath: /etc/registry/config.yml
          name: registry-config
          subPath: config.yml
        - mountPath: /etc/registryctl/config.yml
          name: registry-config
          subPath: ctl-config.yml
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: default-token-8cbmp
          readOnly: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      nodeName: kind-control-plane
      priority: 0
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 10000
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 300
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 300
      volumes:
      - name: registry-root-certificate
        secret:
          defaultMode: 420
          secretName: harbor-core
      - configMap:
          defaultMode: 420
          name: harbor-registry
        name: registry-config
      - emptyDir: {}
        name: registry-data
      - name: default-token-8cbmp
        secret:
          defaultMode: 420
          secretName: default-token-8cbmp
    status:
      conditions:
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:54Z"
        status: "True"
        type: Initialized
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:41:02Z"
        status: "True"
        type: Ready
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:41:02Z"
        status: "True"
        type: ContainersReady
      - lastProbeTime: null
        lastTransitionTime: "2020-04-27T20:40:54Z"
        status: "True"
        type: PodScheduled
      containerStatuses:
      - containerID: containerd://f164d9ba26357b7a12e9b230851e56f1c8114f7dc526f878dea8e19fe92f3d6a
        image: docker.io/goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
        imageID: docker.io/goharbor/registry-photon@sha256:873c73954aaae94267cecdeee83676c04a03dbb3230473ba478ec94fa6299549
        lastState: {}
        name: registry
        ready: true
        restartCount: 0
        state:
          running:
            startedAt: "2020-04-27T20:40:55Z"
      - containerID: containerd://6ff9555713d8d496fbb07098800cf26d9712fba9fa78c677d679f3ec3a04e40a
        image: docker.io/goharbor/harbor-registryctl:v1.10.0
        imageID: docker.io/goharbor/harbor-registryctl@sha256:15ad1012f31a6ba37fbeb66f66fa5ba7fd93081bb1968ed630a349dc4792d04a
        lastState: {}
        name: registryctl
        ready: true
        restartCount: 0
        state:
          running:
            startedAt: "2020-04-27T20:40:56Z"
      hostIP: 172.17.0.2
      phase: Running
      podIP: 100.200.82.31
      qosClass: BestEffort
      startTime: "2020-04-27T20:40:54Z"
  metadata: {}
- items:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: "2020-04-27T20:38:20Z"
      name: default
      namespace: harbor
      resourceVersion: "2331"
      selfLink: /api/v1/namespaces/harbor/serviceaccounts/default
      uid: f4790e60-5749-4ad2-9d74-cad74851bd64
    secrets:
    - name: default-token-8cbmp
  metadata: {}
- items:
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: "2020-04-27T20:39:50Z"
      labels:
        app: harbor
      name: harbor-chartmuseum
      namespace: harbor
      resourceVersion: "3041"
      selfLink: /api/v1/namespaces/harbor/services/harbor-chartmuseum
      uid: 3514b61b-502d-4eaa-b60d-6ab9ad54ad74
    spec:
      clusterIP: 10.102.118.15
      ports:
      - port: 80
        protocol: TCP
        targetPort: 9999
      selector:
        app: harbor
        component: chartmuseum
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: "2020-04-27T20:39:50Z"
      labels:
        app: harbor
      name: harbor-clair
      namespace: harbor
      resourceVersion: "3045"
      selfLink: /api/v1/namespaces/harbor/services/harbor-clair
      uid: 97365097-a623-4c1f-8d99-5fcb6ad49ba3
    spec:
      clusterIP: 10.110.183.127
      ports:
      - name: adapter
        port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        app: harbor
        component: clair
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: "2020-04-27T20:39:51Z"
      labels:
        app: harbor
      name: harbor-core
      namespace: harbor
      resourceVersion: "3048"
      selfLink: /api/v1/namespaces/harbor/services/harbor-core
      uid: d0dffd37-43d6-45f6-b326-c2eb149bfe0a
    spec:
      clusterIP: 10.96.59.88
      ports:
      - port: 80
        protocol: TCP
        targetPort: 8080
      selector:
        app: harbor
        component: core
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: "2020-04-27T20:39:51Z"
      labels:
        app: harbor
      name: harbor-jobservice
      namespace: harbor
      resourceVersion: "3053"
      selfLink: /api/v1/namespaces/harbor/services/harbor-jobservice
      uid: f034d333-6610-4eee-af67-919560cde5ea
    spec:
      clusterIP: 10.104.117.128
      ports:
      - port: 80
        protocol: TCP
        targetPort: 8080
      selector:
        app: harbor
        component: jobservice
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: "2020-04-27T20:39:51Z"
      labels:
        app: harbor
      name: harbor-portal
      namespace: harbor
      resourceVersion: "3056"
      selfLink: /api/v1/namespaces/harbor/services/harbor-portal
      uid: d33c0e81-48b1-426c-89ab-582ce3beb86b
    spec:
      clusterIP: 10.110.189.32
      ports:
      - port: 80
        protocol: TCP
        targetPort: 8080
      selector:
        app: harbor
        component: portal
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: "2020-04-27T20:39:52Z"
      labels:
        app: harbor
      name: harbor-redis
      namespace: harbor
      resourceVersion: "3061"
      selfLink: /api/v1/namespaces/harbor/services/harbor-redis
      uid: 963a8796-b406-4ee9-99dd-b9d3534eaf4a
    spec:
      clusterIP: 10.102.149.201
      ports:
      - port: 6379
        protocol: TCP
        targetPort: 6379
      selector:
        app: harbor
        component: redis
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: "2020-04-27T20:39:52Z"
      labels:
        app: harbor
        component: registry
      name: harbor-registry
      namespace: harbor
      resourceVersion: "3065"
      selfLink: /api/v1/namespaces/harbor/services/harbor-registry
      uid: 1bad05ba-06ec-48f3-9c80-a1ea5dc8f4e8
    spec:
      clusterIP: 10.109.85.6
      ports:
      - name: registry
        port: 5000
        protocol: TCP
        targetPort: 5000
      - name: controller
        port: 8080
        protocol: TCP
        targetPort: 8080
      - name: metrics
        port: 5001
        protocol: TCP
        targetPort: 5001
      selector:
        app: harbor
        component: registry
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  metadata: {}
- items:
  - apiVersion: apps/v1
    data:
      spec:
        template:
          $patch: replace
          metadata:
            creationTimestamp: null
            labels:
              app: harbor
              component: redis
          spec:
            containers:
            - image: goharbor/redis-photon:v1.10.0
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 300
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 6379
                timeoutSeconds: 1
              name: redis
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 1
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 6379
                timeoutSeconds: 1
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
              - mountPath: /var/lib/redis
                name: data
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            schedulerName: default-scheduler
            securityContext:
              fsGroup: 999
            terminationGracePeriodSeconds: 30
    kind: ControllerRevision
    metadata:
      creationTimestamp: "2020-04-27T20:39:55Z"
      labels:
        app: harbor
        component: redis
        controller.kubernetes.io/hash: 5577d5747b
      name: harbor-redis-5577d5747b
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: StatefulSet
        name: harbor-redis
        uid: 882b0fb7-891b-472e-8efc-fd80fd820759
      resourceVersion: "3178"
      selfLink: /apis/apps/v1/namespaces/harbor/controllerrevisions/harbor-redis-5577d5747b
      uid: 8091125a-2c14-4ae6-9a23-fdb9590ae241
    revision: 1
  metadata: {}
- items:
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "4"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:53Z"
      generation: 4
      labels:
        app: harbor
        component: chartmuseum
      name: harbor-chartmuseum
      namespace: harbor
      resourceVersion: "4970"
      selfLink: /apis/apps/v1/namespaces/harbor/deployments/harbor-chartmuseum
      uid: d6eea940-c6ba-4780-879a-a361deb747a8
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: harbor
          component: chartmuseum
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: chartmuseum
        spec:
          containers:
          - env:
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_CHARTMUSEUM_CONFIGMAP
              value: f9cec16a3657790c115495c79fcc2087012d2040
            - name: STAKATER_HARBOR_CHARTMUSEUM_SECRET
              value: 76ad3b4aa7177cb52d5e1377420a8488a40d713b
            envFrom:
            - configMapRef:
                name: harbor-chartmuseum
            - secretRef:
                name: harbor-chartmuseum
            image: goharbor/chartmuseum-photon:v0.9.0-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: chartmuseum
            ports:
            - containerPort: 9999
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /chart_storage
              name: chartmuseum-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: chartmuseum-data
    status:
      availableReplicas: 1
      conditions:
      - lastTransitionTime: "2020-04-27T20:40:03Z"
        lastUpdateTime: "2020-04-27T20:40:03Z"
        message: Deployment has minimum availability.
        reason: MinimumReplicasAvailable
        status: "True"
        type: Available
      - lastTransitionTime: "2020-04-27T20:39:53Z"
        lastUpdateTime: "2020-04-27T20:41:09Z"
        message: ReplicaSet "harbor-chartmuseum-54bd7fd995" has successfully progressed.
        reason: NewReplicaSetAvailable
        status: "True"
        type: Progressing
      observedGeneration: 4
      readyReplicas: 1
      replicas: 1
      updatedReplicas: 1
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "2"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:53Z"
      generation: 2
      labels:
        app: harbor
        component: clair
      name: harbor-clair
      namespace: harbor
      resourceVersion: "5296"
      selfLink: /apis/apps/v1/namespaces/harbor/deployments/harbor-clair
      uid: 88f68e3c-46dc-44b8-ae0b-7166f982a8eb
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: harbor
          component: clair
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: clair
        spec:
          containers:
          - args:
            - -log-level
            - warn
            env:
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            - name: STAKATER_HARBOR_CLAIR_SECRET
              value: a0730b0200d7696815d7081d8af36960d86d3084
            image: goharbor/clair-photon:v2.1.1-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 6061
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: clair
            ports:
            - containerPort: 6060
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 6061
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/clair/config.yaml
              name: config
              subPath: config.yaml
          - env:
            - name: SCANNER_CLAIR_URL
              value: http://127.0.0.1:6060
            - name: SCANNER_STORE_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redis
                  name: harbor-clair
            - name: SCANNER_CLAIR_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: database
                  name: harbor-clair
            - name: SCANNER_LOG_LEVEL
              value: warn
            image: goharbor/clair-adapter-photon:v1.0.1-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /probe/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: adapter
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /probe/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: config
            secret:
              defaultMode: 420
              secretName: harbor-clair
    status:
      availableReplicas: 1
      conditions:
      - lastTransitionTime: "2020-04-27T20:40:45Z"
        lastUpdateTime: "2020-04-27T20:40:45Z"
        message: Deployment has minimum availability.
        reason: MinimumReplicasAvailable
        status: "True"
        type: Available
      - lastTransitionTime: "2020-04-27T20:39:53Z"
        lastUpdateTime: "2020-04-27T20:41:33Z"
        message: ReplicaSet "harbor-clair-57d49f7bb9" has successfully progressed.
        reason: NewReplicaSetAvailable
        status: "True"
        type: Progressing
      observedGeneration: 2
      readyReplicas: 1
      replicas: 1
      updatedReplicas: 1
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "5"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:54Z"
      generation: 5
      labels:
        app: harbor
        component: core
      name: harbor-core
      namespace: harbor
      resourceVersion: "5241"
      selfLink: /apis/apps/v1/namespaces/harbor/deployments/harbor-core
      uid: 728ec57a-46b7-44c5-a027-e90eada3e4a2
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: harbor
          component: core
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: core
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_CORE_CONFIGMAP
              value: e283939a3f24fe072caeb777b04d567d4c50bb29
            - name: STAKATER_HARBOR_INGRESS_SECRET
              value: 656aac349b3f9b6002ac5bd50d567f5d59ac3cb1
            - name: STAKATER_HARBOR_JOBSERVICE_SECRET
              value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
            envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
            image: goharbor/harbor-core:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: core
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              items:
              - key: app.conf
                path: app.conf
              name: harbor-core
            name: config
          - name: secret-key
            secret:
              defaultMode: 420
              items:
              - key: secretKey
                path: key
              secretName: harbor-core
          - name: token-service-private-key
            secret:
              defaultMode: 420
              secretName: harbor-core
          - name: ca-download
            secret:
              defaultMode: 420
              secretName: harbor-ingress
          - emptyDir: {}
            name: psc
    status:
      availableReplicas: 1
      conditions:
      - lastTransitionTime: "2020-04-27T20:41:26Z"
        lastUpdateTime: "2020-04-27T20:41:26Z"
        message: Deployment has minimum availability.
        reason: MinimumReplicasAvailable
        status: "True"
        type: Available
      - lastTransitionTime: "2020-04-27T20:39:54Z"
        lastUpdateTime: "2020-04-27T20:41:27Z"
        message: ReplicaSet "harbor-core-69fc9d9868" has successfully progressed.
        reason: NewReplicaSetAvailable
        status: "True"
        type: Progressing
      observedGeneration: 5
      readyReplicas: 1
      replicas: 1
      updatedReplicas: 1
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "4"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:54Z"
      generation: 4
      labels:
        app: harbor
        component: jobservice
      name: harbor-jobservice
      namespace: harbor
      resourceVersion: "5885"
      selfLink: /apis/apps/v1/namespaces/harbor/deployments/harbor-jobservice
      uid: 5d56b966-bee8-49bc-8da3-9fc7834c0226
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: harbor
          component: jobservice
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: jobservice
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: CORE_URL
              value: http://harbor-core
            - name: REGISTRY_CONTROLLER_URL
              value: http://harbor-registry:8080
            - name: LOG_LEVEL
              value: warn
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_JOBSERVICE_CONFIGMAP
              value: da779fafea89ebd5639aa87e7c2c8214ca7db649
            - name: STAKATER_HARBOR_JOBSERVICE_SECRET
              value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
            image: goharbor/harbor-jobservice:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: jobservice
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/jobservice/config.yml
              name: jobservice-config
              subPath: config.yml
            - mountPath: /var/log/jobs
              name: job-logs
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              name: harbor-jobservice
            name: jobservice-config
          - emptyDir: {}
            name: job-logs
    status:
      availableReplicas: 1
      conditions:
      - lastTransitionTime: "2020-04-27T20:43:16Z"
        lastUpdateTime: "2020-04-27T20:43:16Z"
        message: Deployment has minimum availability.
        reason: MinimumReplicasAvailable
        status: "True"
        type: Available
      - lastTransitionTime: "2020-04-27T20:39:54Z"
        lastUpdateTime: "2020-04-27T20:43:18Z"
        message: ReplicaSet "harbor-jobservice-58484476cb" has successfully progressed.
        reason: NewReplicaSetAvailable
        status: "True"
        type: Progressing
      observedGeneration: 4
      readyReplicas: 1
      replicas: 1
      updatedReplicas: 1
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "1"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:55Z"
      generation: 1
      labels:
        app: harbor
        component: portal
      name: harbor-portal
      namespace: harbor
      resourceVersion: "3468"
      selfLink: /apis/apps/v1/namespaces/harbor/deployments/harbor-portal
      uid: 43c1d180-3902-4d3f-bd6b-b7bc8ea4bac1
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: harbor
          component: portal
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: portal
        spec:
          containers:
          - image: goharbor/harbor-portal:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: portal
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
    status:
      availableReplicas: 1
      conditions:
      - lastTransitionTime: "2020-04-27T20:40:13Z"
        lastUpdateTime: "2020-04-27T20:40:13Z"
        message: Deployment has minimum availability.
        reason: MinimumReplicasAvailable
        status: "True"
        type: Available
      - lastTransitionTime: "2020-04-27T20:39:55Z"
        lastUpdateTime: "2020-04-27T20:40:13Z"
        message: ReplicaSet "harbor-portal-6dbd9fcd57" has successfully progressed.
        reason: NewReplicaSetAvailable
        status: "True"
        type: Progressing
      observedGeneration: 1
      readyReplicas: 1
      replicas: 1
      updatedReplicas: 1
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "5"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:55Z"
      generation: 5
      labels:
        app: harbor
        component: registry
      name: harbor-registry
      namespace: harbor
      resourceVersion: "5049"
      selfLink: /apis/apps/v1/namespaces/harbor/deployments/harbor-registry
      uid: 57887682-a858-4cf8-b074-d3ecbfe97a05
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: harbor
          component: registry
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: registry
        spec:
          containers:
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_REGISTRY_CONFIGMAP
              value: a9d6a966a3cb00e2400f6e0797164310a1c0d17f
            - name: STAKATER_HARBOR_REGISTRY_SECRET
              value: 3bde361646c058ee555fc262793a2e0ec4367c0c
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registry
            ports:
            - containerPort: 5000
              protocol: TCP
            - containerPort: 5001
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/root.crt
              name: registry-root-certificate
              subPath: tls.crt
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_JOBSERVICE_SECRET
              value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/harbor-registryctl:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registryctl
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: registry-root-certificate
            secret:
              defaultMode: 420
              secretName: harbor-core
          - configMap:
              defaultMode: 420
              name: harbor-registry
            name: registry-config
          - emptyDir: {}
            name: registry-data
    status:
      availableReplicas: 1
      conditions:
      - lastTransitionTime: "2020-04-27T20:40:24Z"
        lastUpdateTime: "2020-04-27T20:40:24Z"
        message: Deployment has minimum availability.
        reason: MinimumReplicasAvailable
        status: "True"
        type: Available
      - lastTransitionTime: "2020-04-27T20:39:55Z"
        lastUpdateTime: "2020-04-27T20:41:13Z"
        message: ReplicaSet "harbor-registry-c98dbc647" has successfully progressed.
        reason: NewReplicaSetAvailable
        status: "True"
        type: Progressing
      observedGeneration: 5
      readyReplicas: 1
      replicas: 1
      updatedReplicas: 1
  metadata: {}
- items:
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "4"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:52Z"
      generation: 2
      labels:
        app: harbor
        component: chartmuseum
        pod-template-hash: 54bd7fd995
      name: harbor-chartmuseum-54bd7fd995
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-chartmuseum
        uid: d6eea940-c6ba-4780-879a-a361deb747a8
      resourceVersion: "4959"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-chartmuseum-54bd7fd995
      uid: 5dd37414-2f9d-493c-ade5-083ab0b1c8f5
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: harbor
          component: chartmuseum
          pod-template-hash: 54bd7fd995
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: chartmuseum
            pod-template-hash: 54bd7fd995
        spec:
          containers:
          - env:
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_CHARTMUSEUM_CONFIGMAP
              value: f9cec16a3657790c115495c79fcc2087012d2040
            - name: STAKATER_HARBOR_CHARTMUSEUM_SECRET
              value: 76ad3b4aa7177cb52d5e1377420a8488a40d713b
            envFrom:
            - configMapRef:
                name: harbor-chartmuseum
            - secretRef:
                name: harbor-chartmuseum
            image: goharbor/chartmuseum-photon:v0.9.0-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: chartmuseum
            ports:
            - containerPort: 9999
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /chart_storage
              name: chartmuseum-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: chartmuseum-data
    status:
      availableReplicas: 1
      fullyLabeledReplicas: 1
      observedGeneration: 2
      readyReplicas: 1
      replicas: 1
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "2"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:49Z"
      generation: 2
      labels:
        app: harbor
        component: chartmuseum
        pod-template-hash: 5767fb7559
      name: harbor-chartmuseum-5767fb7559
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-chartmuseum
        uid: d6eea940-c6ba-4780-879a-a361deb747a8
      resourceVersion: "4379"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-chartmuseum-5767fb7559
      uid: 23864755-b911-45fe-b9bd-887601559d64
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: chartmuseum
          pod-template-hash: 5767fb7559
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: chartmuseum
            pod-template-hash: 5767fb7559
        spec:
          containers:
          - env:
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            envFrom:
            - configMapRef:
                name: harbor-chartmuseum
            - secretRef:
                name: harbor-chartmuseum
            image: goharbor/chartmuseum-photon:v0.9.0-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: chartmuseum
            ports:
            - containerPort: 9999
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /chart_storage
              name: chartmuseum-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: chartmuseum-data
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "1"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:53Z"
      generation: 2
      labels:
        app: harbor
        component: chartmuseum
        pod-template-hash: 5c7c945479
      name: harbor-chartmuseum-5c7c945479
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-chartmuseum
        uid: d6eea940-c6ba-4780-879a-a361deb747a8
      resourceVersion: "4968"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-chartmuseum-5c7c945479
      uid: 7214d97d-ad76-4cc4-bdf3-e8c9d9193fd2
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: chartmuseum
          pod-template-hash: 5c7c945479
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: chartmuseum
            pod-template-hash: 5c7c945479
        spec:
          containers:
          - env:
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            envFrom:
            - configMapRef:
                name: harbor-chartmuseum
            - secretRef:
                name: harbor-chartmuseum
            image: goharbor/chartmuseum-photon:v0.9.0-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: chartmuseum
            ports:
            - containerPort: 9999
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /chart_storage
              name: chartmuseum-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: chartmuseum-data
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "3"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:50Z"
      generation: 3
      labels:
        app: harbor
        component: chartmuseum
        pod-template-hash: 69568c8dd8
      name: harbor-chartmuseum-69568c8dd8
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-chartmuseum
        uid: d6eea940-c6ba-4780-879a-a361deb747a8
      resourceVersion: "4554"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-chartmuseum-69568c8dd8
      uid: cdb14399-10b7-406e-945c-1ff541295d1a
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: chartmuseum
          pod-template-hash: 69568c8dd8
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: chartmuseum
            pod-template-hash: 69568c8dd8
        spec:
          containers:
          - env:
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_CHARTMUSEUM_CONFIGMAP
              value: f9cec16a3657790c115495c79fcc2087012d2040
            envFrom:
            - configMapRef:
                name: harbor-chartmuseum
            - secretRef:
                name: harbor-chartmuseum
            image: goharbor/chartmuseum-photon:v0.9.0-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: chartmuseum
            ports:
            - containerPort: 9999
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /chart_storage
              name: chartmuseum-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: chartmuseum-data
    status:
      observedGeneration: 3
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "2"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:51Z"
      generation: 1
      labels:
        app: harbor
        component: clair
        pod-template-hash: 57d49f7bb9
      name: harbor-clair-57d49f7bb9
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-clair
        uid: 88f68e3c-46dc-44b8-ae0b-7166f982a8eb
      resourceVersion: "5284"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-clair-57d49f7bb9
      uid: e355fb9e-9c2a-42a5-8994-1d78230c6252
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: harbor
          component: clair
          pod-template-hash: 57d49f7bb9
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: clair
            pod-template-hash: 57d49f7bb9
        spec:
          containers:
          - args:
            - -log-level
            - warn
            env:
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            - name: STAKATER_HARBOR_CLAIR_SECRET
              value: a0730b0200d7696815d7081d8af36960d86d3084
            image: goharbor/clair-photon:v2.1.1-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 6061
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: clair
            ports:
            - containerPort: 6060
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 6061
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/clair/config.yaml
              name: config
              subPath: config.yaml
          - env:
            - name: SCANNER_CLAIR_URL
              value: http://127.0.0.1:6060
            - name: SCANNER_STORE_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redis
                  name: harbor-clair
            - name: SCANNER_CLAIR_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: database
                  name: harbor-clair
            - name: SCANNER_LOG_LEVEL
              value: warn
            image: goharbor/clair-adapter-photon:v1.0.1-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /probe/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: adapter
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /probe/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: config
            secret:
              defaultMode: 420
              secretName: harbor-clair
    status:
      availableReplicas: 1
      fullyLabeledReplicas: 1
      observedGeneration: 1
      readyReplicas: 1
      replicas: 1
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "1"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:53Z"
      generation: 2
      labels:
        app: harbor
        component: clair
        pod-template-hash: 7c4b8d964d
      name: harbor-clair-7c4b8d964d
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-clair
        uid: 88f68e3c-46dc-44b8-ae0b-7166f982a8eb
      resourceVersion: "5294"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-clair-7c4b8d964d
      uid: 6744fd8a-7b42-4b96-8ed0-6fa64c383bf3
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: clair
          pod-template-hash: 7c4b8d964d
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: clair
            pod-template-hash: 7c4b8d964d
        spec:
          containers:
          - args:
            - -log-level
            - warn
            env:
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            image: goharbor/clair-photon:v2.1.1-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 6061
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: clair
            ports:
            - containerPort: 6060
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 6061
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/clair/config.yaml
              name: config
              subPath: config.yaml
          - env:
            - name: SCANNER_CLAIR_URL
              value: http://127.0.0.1:6060
            - name: SCANNER_STORE_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redis
                  name: harbor-clair
            - name: SCANNER_CLAIR_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: database
                  name: harbor-clair
            - name: SCANNER_LOG_LEVEL
              value: warn
            image: goharbor/clair-adapter-photon:v1.0.1-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /probe/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: adapter
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /probe/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: config
            secret:
              defaultMode: 420
              secretName: harbor-clair
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "3"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:50Z"
      generation: 3
      labels:
        app: harbor
        component: core
        pod-template-hash: 66984fbf7
      name: harbor-core-66984fbf7
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-core
        uid: 728ec57a-46b7-44c5-a027-e90eada3e4a2
      resourceVersion: "5240"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-core-66984fbf7
      uid: 673d32cd-6525-4284-991c-f9e7e2b62f8a
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: core
          pod-template-hash: 66984fbf7
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: core
            pod-template-hash: 66984fbf7
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_CORE_CONFIGMAP
              value: e283939a3f24fe072caeb777b04d567d4c50bb29
            envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
            image: goharbor/harbor-core:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: core
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              items:
              - key: app.conf
                path: app.conf
              name: harbor-core
            name: config
          - name: secret-key
            secret:
              defaultMode: 420
              items:
              - key: secretKey
                path: key
              secretName: harbor-core
          - name: token-service-private-key
            secret:
              defaultMode: 420
              secretName: harbor-core
          - name: ca-download
            secret:
              defaultMode: 420
              secretName: harbor-ingress
          - emptyDir: {}
            name: psc
    status:
      observedGeneration: 3
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "4"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:51Z"
      generation: 1
      labels:
        app: harbor
        component: core
        pod-template-hash: 67b8c46fd9
      name: harbor-core-67b8c46fd9
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-core
        uid: 728ec57a-46b7-44c5-a027-e90eada3e4a2
      resourceVersion: "4477"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-core-67b8c46fd9
      uid: 73356906-c32e-4837-b3a7-aaebb923c3bc
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: core
          pod-template-hash: 67b8c46fd9
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: core
            pod-template-hash: 67b8c46fd9
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_CORE_CONFIGMAP
              value: e283939a3f24fe072caeb777b04d567d4c50bb29
            - name: STAKATER_HARBOR_INGRESS_SECRET
              value: 656aac349b3f9b6002ac5bd50d567f5d59ac3cb1
            envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
            image: goharbor/harbor-core:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: core
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              items:
              - key: app.conf
                path: app.conf
              name: harbor-core
            name: config
          - name: secret-key
            secret:
              defaultMode: 420
              items:
              - key: secretKey
                path: key
              secretName: harbor-core
          - name: token-service-private-key
            secret:
              defaultMode: 420
              secretName: harbor-core
          - name: ca-download
            secret:
              defaultMode: 420
              secretName: harbor-ingress
          - emptyDir: {}
            name: psc
    status:
      observedGeneration: 1
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "1"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:54Z"
      generation: 2
      labels:
        app: harbor
        component: core
        pod-template-hash: 67db5f485c
      name: harbor-core-67db5f485c
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-core
        uid: 728ec57a-46b7-44c5-a027-e90eada3e4a2
      resourceVersion: "4327"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-core-67db5f485c
      uid: 5a2a1f51-bbb7-4b56-9bec-4d64fe339a26
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: core
          pod-template-hash: 67db5f485c
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: core
            pod-template-hash: 67db5f485c
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
            image: goharbor/harbor-core:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: core
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              items:
              - key: app.conf
                path: app.conf
              name: harbor-core
            name: config
          - name: secret-key
            secret:
              defaultMode: 420
              items:
              - key: secretKey
                path: key
              secretName: harbor-core
          - name: token-service-private-key
            secret:
              defaultMode: 420
              secretName: harbor-core
          - name: ca-download
            secret:
              defaultMode: 420
              secretName: harbor-ingress
          - emptyDir: {}
            name: psc
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "5"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:52Z"
      generation: 2
      labels:
        app: harbor
        component: core
        pod-template-hash: 69fc9d9868
      name: harbor-core-69fc9d9868
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-core
        uid: 728ec57a-46b7-44c5-a027-e90eada3e4a2
      resourceVersion: "5231"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-core-69fc9d9868
      uid: 8b1784fb-d098-41ba-aee5-e96d055b091f
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: harbor
          component: core
          pod-template-hash: 69fc9d9868
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: core
            pod-template-hash: 69fc9d9868
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_CORE_CONFIGMAP
              value: e283939a3f24fe072caeb777b04d567d4c50bb29
            - name: STAKATER_HARBOR_INGRESS_SECRET
              value: 656aac349b3f9b6002ac5bd50d567f5d59ac3cb1
            - name: STAKATER_HARBOR_JOBSERVICE_SECRET
              value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
            envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
            image: goharbor/harbor-core:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: core
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              items:
              - key: app.conf
                path: app.conf
              name: harbor-core
            name: config
          - name: secret-key
            secret:
              defaultMode: 420
              items:
              - key: secretKey
                path: key
              secretName: harbor-core
          - name: token-service-private-key
            secret:
              defaultMode: 420
              secretName: harbor-core
          - name: ca-download
            secret:
              defaultMode: 420
              secretName: harbor-ingress
          - emptyDir: {}
            name: psc
    status:
      availableReplicas: 1
      fullyLabeledReplicas: 1
      observedGeneration: 2
      readyReplicas: 1
      replicas: 1
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "2"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:49Z"
      generation: 2
      labels:
        app: harbor
        component: core
        pod-template-hash: 754b5d7d65
      name: harbor-core-754b5d7d65
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-core
        uid: 728ec57a-46b7-44c5-a027-e90eada3e4a2
      resourceVersion: "4586"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-core-754b5d7d65
      uid: 35e2c852-1395-4bb5-9859-c388c0daa534
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: core
          pod-template-hash: 754b5d7d65
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: core
            pod-template-hash: 754b5d7d65
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
            image: goharbor/harbor-core:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: core
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              items:
              - key: app.conf
                path: app.conf
              name: harbor-core
            name: config
          - name: secret-key
            secret:
              defaultMode: 420
              items:
              - key: secretKey
                path: key
              secretName: harbor-core
          - name: token-service-private-key
            secret:
              defaultMode: 420
              secretName: harbor-core
          - name: ca-download
            secret:
              defaultMode: 420
              secretName: harbor-ingress
          - emptyDir: {}
            name: psc
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "4"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:52Z"
      generation: 2
      labels:
        app: harbor
        component: jobservice
        pod-template-hash: 58484476cb
      name: harbor-jobservice-58484476cb
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-jobservice
        uid: 5d56b966-bee8-49bc-8da3-9fc7834c0226
      resourceVersion: "5874"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-jobservice-58484476cb
      uid: c081b255-820e-4c82-a742-abcfcee8171a
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: harbor
          component: jobservice
          pod-template-hash: 58484476cb
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: jobservice
            pod-template-hash: 58484476cb
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: CORE_URL
              value: http://harbor-core
            - name: REGISTRY_CONTROLLER_URL
              value: http://harbor-registry:8080
            - name: LOG_LEVEL
              value: warn
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_JOBSERVICE_CONFIGMAP
              value: da779fafea89ebd5639aa87e7c2c8214ca7db649
            - name: STAKATER_HARBOR_JOBSERVICE_SECRET
              value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
            image: goharbor/harbor-jobservice:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: jobservice
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/jobservice/config.yml
              name: jobservice-config
              subPath: config.yml
            - mountPath: /var/log/jobs
              name: job-logs
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              name: harbor-jobservice
            name: jobservice-config
          - emptyDir: {}
            name: job-logs
    status:
      availableReplicas: 1
      fullyLabeledReplicas: 1
      observedGeneration: 2
      readyReplicas: 1
      replicas: 1
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "2"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:49Z"
      generation: 2
      labels:
        app: harbor
        component: jobservice
        pod-template-hash: 776cc785b8
      name: harbor-jobservice-776cc785b8
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-jobservice
        uid: 5d56b966-bee8-49bc-8da3-9fc7834c0226
      resourceVersion: "4539"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-jobservice-776cc785b8
      uid: 28384101-1f41-4792-b659-ee6b81085a76
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: jobservice
          pod-template-hash: 776cc785b8
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: jobservice
            pod-template-hash: 776cc785b8
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: CORE_URL
              value: http://harbor-core
            - name: REGISTRY_CONTROLLER_URL
              value: http://harbor-registry:8080
            - name: LOG_LEVEL
              value: warn
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            image: goharbor/harbor-jobservice:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: jobservice
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/jobservice/config.yml
              name: jobservice-config
              subPath: config.yml
            - mountPath: /var/log/jobs
              name: job-logs
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              name: harbor-jobservice
            name: jobservice-config
          - emptyDir: {}
            name: job-logs
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "1"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:54Z"
      generation: 2
      labels:
        app: harbor
        component: jobservice
        pod-template-hash: 79d5dcb5b8
      name: harbor-jobservice-79d5dcb5b8
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-jobservice
        uid: 5d56b966-bee8-49bc-8da3-9fc7834c0226
      resourceVersion: "4366"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-jobservice-79d5dcb5b8
      uid: f420d138-e4a5-4e91-8dbd-839bf8428590
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: jobservice
          pod-template-hash: 79d5dcb5b8
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: jobservice
            pod-template-hash: 79d5dcb5b8
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: CORE_URL
              value: http://harbor-core
            - name: REGISTRY_CONTROLLER_URL
              value: http://harbor-registry:8080
            - name: LOG_LEVEL
              value: warn
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            image: goharbor/harbor-jobservice:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: jobservice
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/jobservice/config.yml
              name: jobservice-config
              subPath: config.yml
            - mountPath: /var/log/jobs
              name: job-logs
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              name: harbor-jobservice
            name: jobservice-config
          - emptyDir: {}
            name: job-logs
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "3"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:50Z"
      generation: 3
      labels:
        app: harbor
        component: jobservice
        pod-template-hash: 7bf98c7c9
      name: harbor-jobservice-7bf98c7c9
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-jobservice
        uid: 5d56b966-bee8-49bc-8da3-9fc7834c0226
      resourceVersion: "5884"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-jobservice-7bf98c7c9
      uid: 38225793-5c43-4375-baec-b8c190a784d8
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: jobservice
          pod-template-hash: 7bf98c7c9
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: jobservice
            pod-template-hash: 7bf98c7c9
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: CORE_URL
              value: http://harbor-core
            - name: REGISTRY_CONTROLLER_URL
              value: http://harbor-registry:8080
            - name: LOG_LEVEL
              value: warn
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_JOBSERVICE_CONFIGMAP
              value: da779fafea89ebd5639aa87e7c2c8214ca7db649
            image: goharbor/harbor-jobservice:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: jobservice
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/jobservice/config.yml
              name: jobservice-config
              subPath: config.yml
            - mountPath: /var/log/jobs
              name: job-logs
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              name: harbor-jobservice
            name: jobservice-config
          - emptyDir: {}
            name: job-logs
    status:
      observedGeneration: 3
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "1"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:55Z"
      generation: 1
      labels:
        app: harbor
        component: portal
        pod-template-hash: 6dbd9fcd57
      name: harbor-portal-6dbd9fcd57
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-portal
        uid: 43c1d180-3902-4d3f-bd6b-b7bc8ea4bac1
      resourceVersion: "3466"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-portal-6dbd9fcd57
      uid: 446828f2-9767-42b4-8d97-6b2ebd06fbc7
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: harbor
          component: portal
          pod-template-hash: 6dbd9fcd57
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: portal
            pod-template-hash: 6dbd9fcd57
        spec:
          containers:
          - image: goharbor/harbor-portal:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: portal
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
    status:
      availableReplicas: 1
      fullyLabeledReplicas: 1
      observedGeneration: 1
      readyReplicas: 1
      replicas: 1
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "3"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:50Z"
      generation: 3
      labels:
        app: harbor
        component: registry
        pod-template-hash: 5464446f6c
      name: harbor-registry-5464446f6c
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-registry
        uid: 57887682-a858-4cf8-b074-d3ecbfe97a05
      resourceVersion: "4668"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-registry-5464446f6c
      uid: 45b80fd8-75ff-4a29-af8f-66be53fc8ab6
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: registry
          pod-template-hash: 5464446f6c
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: registry
            pod-template-hash: 5464446f6c
        spec:
          containers:
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_REGISTRY_CONFIGMAP
              value: a9d6a966a3cb00e2400f6e0797164310a1c0d17f
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registry
            ports:
            - containerPort: 5000
              protocol: TCP
            - containerPort: 5001
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/root.crt
              name: registry-root-certificate
              subPath: tls.crt
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/harbor-registryctl:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registryctl
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: registry-root-certificate
            secret:
              defaultMode: 420
              secretName: harbor-core
          - configMap:
              defaultMode: 420
              name: harbor-registry
            name: registry-config
          - emptyDir: {}
            name: registry-data
    status:
      observedGeneration: 3
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "1"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:55Z"
      generation: 2
      labels:
        app: harbor
        component: registry
        pod-template-hash: 586657484d
      name: harbor-registry-586657484d
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-registry
        uid: 57887682-a858-4cf8-b074-d3ecbfe97a05
      resourceVersion: "5048"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-registry-586657484d
      uid: b87f78c9-2261-4aca-89b8-5a61daee00cb
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: registry
          pod-template-hash: 586657484d
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: registry
            pod-template-hash: 586657484d
        spec:
          containers:
          - args:
            - serve
            - /etc/registry/config.yml
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registry
            ports:
            - containerPort: 5000
              protocol: TCP
            - containerPort: 5001
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/root.crt
              name: registry-root-certificate
              subPath: tls.crt
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/harbor-registryctl:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registryctl
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: registry-root-certificate
            secret:
              defaultMode: 420
              secretName: harbor-core
          - configMap:
              defaultMode: 420
              name: harbor-registry
            name: registry-config
          - emptyDir: {}
            name: registry-data
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "4"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:52Z"
      generation: 1
      labels:
        app: harbor
        component: registry
        pod-template-hash: 6dbc88bfb8
      name: harbor-registry-6dbc88bfb8
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-registry
        uid: 57887682-a858-4cf8-b074-d3ecbfe97a05
      resourceVersion: "4509"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-registry-6dbc88bfb8
      uid: 85e10bc3-eeed-428d-b533-3020b7407d41
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: registry
          pod-template-hash: 6dbc88bfb8
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: registry
            pod-template-hash: 6dbc88bfb8
        spec:
          containers:
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_REGISTRY_CONFIGMAP
              value: a9d6a966a3cb00e2400f6e0797164310a1c0d17f
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registry
            ports:
            - containerPort: 5000
              protocol: TCP
            - containerPort: 5001
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/root.crt
              name: registry-root-certificate
              subPath: tls.crt
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_JOBSERVICE_SECRET
              value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/harbor-registryctl:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registryctl
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: registry-root-certificate
            secret:
              defaultMode: 420
              secretName: harbor-core
          - configMap:
              defaultMode: 420
              name: harbor-registry
            name: registry-config
          - emptyDir: {}
            name: registry-data
    status:
      observedGeneration: 1
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "2"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:49Z"
      generation: 2
      labels:
        app: harbor
        component: registry
        pod-template-hash: 844b574bdf
      name: harbor-registry-844b574bdf
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-registry
        uid: 57887682-a858-4cf8-b074-d3ecbfe97a05
      resourceVersion: "4396"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-registry-844b574bdf
      uid: d91e8198-19fc-4ee9-86ef-6efb28670855
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: registry
          pod-template-hash: 844b574bdf
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: registry
            pod-template-hash: 844b574bdf
        spec:
          containers:
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registry
            ports:
            - containerPort: 5000
              protocol: TCP
            - containerPort: 5001
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/root.crt
              name: registry-root-certificate
              subPath: tls.crt
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/harbor-registryctl:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registryctl
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: registry-root-certificate
            secret:
              defaultMode: 420
              secretName: harbor-core
          - configMap:
              defaultMode: 420
              name: harbor-registry
            name: registry-config
          - emptyDir: {}
            name: registry-data
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: apps/v1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "5"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:53Z"
      generation: 2
      labels:
        app: harbor
        component: registry
        pod-template-hash: c98dbc647
      name: harbor-registry-c98dbc647
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-registry
        uid: 57887682-a858-4cf8-b074-d3ecbfe97a05
      resourceVersion: "5038"
      selfLink: /apis/apps/v1/namespaces/harbor/replicasets/harbor-registry-c98dbc647
      uid: 31975279-ed67-439b-ab4b-435a0f951e76
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: harbor
          component: registry
          pod-template-hash: c98dbc647
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: registry
            pod-template-hash: c98dbc647
        spec:
          containers:
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_REGISTRY_CONFIGMAP
              value: a9d6a966a3cb00e2400f6e0797164310a1c0d17f
            - name: STAKATER_HARBOR_REGISTRY_SECRET
              value: 3bde361646c058ee555fc262793a2e0ec4367c0c
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registry
            ports:
            - containerPort: 5000
              protocol: TCP
            - containerPort: 5001
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/root.crt
              name: registry-root-certificate
              subPath: tls.crt
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_JOBSERVICE_SECRET
              value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/harbor-registryctl:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registryctl
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: registry-root-certificate
            secret:
              defaultMode: 420
              secretName: harbor-core
          - configMap:
              defaultMode: 420
              name: harbor-registry
            name: registry-config
          - emptyDir: {}
            name: registry-data
    status:
      availableReplicas: 1
      fullyLabeledReplicas: 1
      observedGeneration: 2
      readyReplicas: 1
      replicas: 1
  metadata: {}
- items:
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      creationTimestamp: "2020-04-27T20:39:55Z"
      generation: 1
      labels:
        app: harbor
        component: redis
      name: harbor-redis
      namespace: harbor
      resourceVersion: "3577"
      selfLink: /apis/apps/v1/namespaces/harbor/statefulsets/harbor-redis
      uid: 882b0fb7-891b-472e-8efc-fd80fd820759
    spec:
      podManagementPolicy: OrderedReady
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: harbor
          component: redis
      serviceName: harbor-redis
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: redis
        spec:
          containers:
          - image: goharbor/redis-photon:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              tcpSocket:
                port: 6379
              timeoutSeconds: 1
            name: redis
            readinessProbe:
              failureThreshold: 3
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              tcpSocket:
                port: 6379
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /var/lib/redis
              name: data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 999
          terminationGracePeriodSeconds: 30
      updateStrategy:
        rollingUpdate:
          partition: 0
        type: RollingUpdate
      volumeClaimTemplates:
      - metadata:
          creationTimestamp: null
          labels:
            app: harbor
          name: data
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
          volumeMode: Filesystem
        status:
          phase: Pending
    status:
      collisionCount: 0
      currentReplicas: 1
      currentRevision: harbor-redis-5577d5747b
      observedGeneration: 1
      readyReplicas: 1
      replicas: 1
      updateRevision: harbor-redis-5577d5747b
      updatedReplicas: 1
  metadata: {}
- items:
  - apiVersion: cert-manager.io/v1alpha2
    kind: CertificateRequest
    metadata:
      annotations:
        cert-manager.io/certificate-name: harbor-ingress
        cert-manager.io/private-key-secret-name: harbor-ingress
      creationTimestamp: "2020-04-27T20:39:56Z"
      generation: 1
      labels:
        app: harbor
      name: harbor-ingress-1582325746
      namespace: harbor
      ownerReferences:
      - apiVersion: cert-manager.io/v1alpha2
        blockOwnerDeletion: true
        controller: true
        kind: Certificate
        name: harbor-ingress
        uid: e5b11467-8d7b-4484-9197-4b15b0cded23
      resourceVersion: "3208"
      selfLink: /apis/cert-manager.io/v1alpha2/namespaces/harbor/certificaterequests/harbor-ingress-1582325746
      uid: 1dda4b01-a25a-4732-8513-3367c13fc792
    spec:
      csr: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ2tUQ0NBWGtDQVFBd0Z6RVZNQk1HQTFVRUNoTU1ZMlZ5ZEMxdFlXNWhaMlZ5TUlJQklqQU5CZ2txaGtpRwo5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBd0VXa0tMWnhXcXpXc2l0TzRXMXR1NWdzMDlBVVRCb3FlWFNyCm1XU2FUdFQvamNUR01UanpUVEY4amJhYVFFeDNTa1ZTZjdXZERPWG9KN3JEN3FiSE5ndm0ycTBsWDUwWDFZa0YKOE5TMVdpdUtVdk8vaWY5d1Z2dEcxYjVjZnZmT0FwdmttRGR0SlRaVDVXOTFMWWdKNy9laE9FRDFITFhrUGVMagpuVGVJMDRpTDYxbloxV295YlIyelVYa2xrQTkvejlUTlo5MFBLU3JubW1ubllRcXplaXhiOHNIbGNWeWJ6cHV5CmNXUHRVeEdFcnJuY3M0ZU5MUFBlL083a1lIN1pFQnA3aXpsZkwybDFjYjJiR1F2N1lxdmhRMFp4WE9wZ2NPRngKMk4zUG1JejBqWmJaVFRpdnkwUEVYZ1owdThGYmF1aUwxdFF5QThuVVZHb3ZUM2Y2MVFJREFRQUJvRFV3TXdZSgpLb1pJaHZjTkFRa09NU1l3SkRBaUJnTlZIUkVFR3pBWmdoZG9ZWEppYjNJdU1USTNMakF1TUM0eExtNXBjQzVwCmJ6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFBemowZXJBZ3czbWE4WW54QXBOdEdldUxnNndFVUdhTFdLZkEKK0pGbEswSlRtK3daeU9tY0MyUzZBZ0JVcVk2dUZlRDUwM292VlpBTjFJQ0Z3ektDS2ZianFDeURuQ3ltWWJ0bgpjN1VRcm5VODUwU05GTCtHbEEwS1JXa3BLSEhQQnJzRzd1NlpPWE4zQkh5R3llY3pCWUl4Q3d4MEJEY1lta3Y3CmdyNHcyTUx1akw3UWhxWFd4dUlBZHF2VThLU05jWlRlTGNzVWdKUUtLNEx3ZHRtY3FxajVXaHdxQU5xc0I0eFgKK2pPandLZVVDdDg5blV3Ni8yUUx5cXVGUzBMQTBUYit1VzMyUkJMRnJQRWJMQjkzMEpBTW5RQ0g3emdKRUZWNApzM3dTSE5WUlVZTGNhYzVad3RMbzlIcWtUQnFwTk1uVWpvSDRpUDVnb1pWaEJIV1VuUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=
      issuerRef:
        group: cert-manager.io
        kind: ClusterIssuer
        name: ingress-ca
    status:
      ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMwakNDQWJxZ0F3SUJBZ0lJTTJrUWVscjYycTh3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2FXNW5jbVZ6Y3kxallUQWVGdzB5TURBME1qY3lNREU0TURaYUZ3MHlNVEEwTWpZeU1ETXpNRFphTUJVeApFekFSQmdOVkJBTVRDbWx1WjNKbGMzTXRZMkV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUUR6SXdlRnFIYktoRjNCWUdDaTFCOXAwNmNOVU1Hc2MyMm9lWVcvYmlqZmkvMWRRR3ViOHVBRnNPVG4KMTBHc0EvbzZxd25MS1BtT2k1U3Y3MzVlRGpPMThxSXMwcUhrdkVmbG8xVXdKZGw2Y3ZVU1ZDYTNlbStsU28xUwpEY1dxeDJuRlFjUVgxOEluc2dLYnhQZGY5UE5uQkM4QnE0L2ZPQTRoM1BBNTJEUHQxVGFCODNZZFhMdVNnMzZUCmUwTWI3ZnNadDRGZDMxWTArK0kxQklLc0dWWk0rejQxVlYrcWlucFpsTkZhQ0F4d2VwTnJPMGhXOUoxRlh0akYKTSsrYVR5bHNCQlJmV1FRcFFIZXAvME4vSzBZNDVPeURQVmdJNWp5a2d1VzM0aFZJRGYya3ViYldXMmJObVpIUAorVUI1MkZxSFpRemxWU1ZYMWhiSVI2Wm5lZzMzQWdNQkFBR2pKakFrTUE0R0ExVWREd0VCL3dRRUF3SUNwREFTCkJnTlZIUk1CQWY4RUNEQUdBUUgvQWdFQU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ2Ura0VsWlZrZEdvVGcKVkVOQkhERGJYMkY5N0FmRDFMcjlaWTVlMHFORVJlZnpvSElJdGJrN00reXk3QTRLNzJkcHBzdlYya0ZtMXhZcApnd1o1OGZKWGtSSk5XQjlOMjNIcHVJUXdzZmVFTkpBYk8yL1UrWEZVdnBZMitaazQ5bE5oUEZWZFBjcS9nTXdSCkQ2Y2hWckF6L3NvLzh2V0h3WDREOTBQL01vd0dWQ2F4aENEWVZDRGt1WERKeGdwdnEvSDlQaXU3YlNYUjd1TVEKb3Z4V0QxN1BuN2xmdXFSbitjT2xmMVdmTXlQUmJXNHY1bGVjb0J0SGdZUkhsMG9PVU5SVXdJTHIydkkrczkzTwpjMmVPQ3dLZU9iWGllSUU3RjRGVWs2cGNUdjFBbDRjRXlzK2IyVWFxek96SndlY3J0ZUh5Z2ZTYjBWVE1mL3BwCmEzd3hZV0VDCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
      certificate: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRUkZSR1N3bnFwV0NLcFpOTWE0Q0VKREFOQmdrcWhraUc5dzBCQVFzRkFEQVYKTVJNd0VRWURWUVFERXdwcGJtZHlaWE56TFdOaE1CNFhEVEl3TURReU56SXdNemsxTmxvWERUSXdNRGN5TmpJdwpNemsxTmxvd0Z6RVZNQk1HQTFVRUNoTU1ZMlZ5ZEMxdFlXNWhaMlZ5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBd0VXa0tMWnhXcXpXc2l0TzRXMXR1NWdzMDlBVVRCb3FlWFNybVdTYVR0VC8KamNUR01UanpUVEY4amJhYVFFeDNTa1ZTZjdXZERPWG9KN3JEN3FiSE5ndm0ycTBsWDUwWDFZa0Y4TlMxV2l1SwpVdk8vaWY5d1Z2dEcxYjVjZnZmT0FwdmttRGR0SlRaVDVXOTFMWWdKNy9laE9FRDFITFhrUGVMam5UZUkwNGlMCjYxbloxV295YlIyelVYa2xrQTkvejlUTlo5MFBLU3JubW1ubllRcXplaXhiOHNIbGNWeWJ6cHV5Y1dQdFV4R0UKcnJuY3M0ZU5MUFBlL083a1lIN1pFQnA3aXpsZkwybDFjYjJiR1F2N1lxdmhRMFp4WE9wZ2NPRngyTjNQbUl6MApqWmJaVFRpdnkwUEVYZ1owdThGYmF1aUwxdFF5QThuVVZHb3ZUM2Y2MVFJREFRQUJvMWt3VnpBT0JnTlZIUThCCkFmOEVCQU1DQmFBd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3RXdEQVlEVlIwVEFRSC9CQUl3QURBaUJnTlYKSFJFRUd6QVpnaGRvWVhKaWIzSXVNVEkzTGpBdU1DNHhMbTVwY0M1cGJ6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBbFZ3ZWhjTjZaUVM5ZXJ3SmJvOTNUV1JoYkk3aXlDM2twaENZZkNsdVVqNHptbjQzMGlGVXpualdFSE93CmRoTlo1OWhlVnFCWWZYcEkvS29zMkdYSE9tdmZDQk1sREd4bGkzNGllR0k0R21mYXl4R29sTlhDdGxDU3Y0SjkKZDhtQUVIRFI5THdUVkllSlFlaU1DZ1MyUjFtMS83TTRZelEra0pieUdNcXBzY0ZiQy9hRUlFdWVJSVdWb2tuUAowdU9ORUZreUM3Tys2cm5mRnBPMjNPMENDRVhGR25iWWRUaWg0T1VXVGZ0c1NtZkpIc3NLcTRaN3B2aUJRWjd3Ckl3a1NpVXFIVDZVeTRpM2FpZm5HU1cxajlOMnM5Zm5DWjBEaG0vZThQTmJTcDQrNFcxLzNQdStVNnpDTFlLK2oKVWpIQkVHbHJoQ3ZKTjY2eUtoZkxHaUdpU0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      conditions:
      - lastTransitionTime: "2020-04-27T20:39:56Z"
        message: Certificate fetched from issuer successfully
        reason: Issued
        status: "True"
        type: Ready
  metadata: {}
- items:
  - apiVersion: cert-manager.io/v1alpha2
    kind: Certificate
    metadata:
      creationTimestamp: "2020-04-27T20:39:56Z"
      generation: 1
      labels:
        app: harbor
      name: harbor-ingress
      namespace: harbor
      ownerReferences:
      - apiVersion: extensions/v1beta1
        blockOwnerDeletion: true
        controller: true
        kind: Ingress
        name: harbor-ingress
        uid: 760712d7-3191-44e9-a8e6-0fa92610eeb5
      resourceVersion: "3211"
      selfLink: /apis/cert-manager.io/v1alpha2/namespaces/harbor/certificates/harbor-ingress
      uid: e5b11467-8d7b-4484-9197-4b15b0cded23
    spec:
      dnsNames:
      - harbor.127.0.0.1.nip.io
      issuerRef:
        group: cert-manager.io
        kind: ClusterIssuer
        name: ingress-ca
      secretName: harbor-ingress
    status:
      conditions:
      - lastTransitionTime: "2020-04-27T20:39:56Z"
        message: Certificate is up to date and has not expired
        reason: Ready
        status: "True"
        type: Ready
      notAfter: "2020-07-26T20:39:56Z"
  metadata: {}
- items:
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "4"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:53Z"
      generation: 4
      labels:
        app: harbor
        component: chartmuseum
      name: harbor-chartmuseum
      namespace: harbor
      resourceVersion: "4970"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/deployments/harbor-chartmuseum
      uid: d6eea940-c6ba-4780-879a-a361deb747a8
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: harbor
          component: chartmuseum
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: chartmuseum
        spec:
          containers:
          - env:
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_CHARTMUSEUM_CONFIGMAP
              value: f9cec16a3657790c115495c79fcc2087012d2040
            - name: STAKATER_HARBOR_CHARTMUSEUM_SECRET
              value: 76ad3b4aa7177cb52d5e1377420a8488a40d713b
            envFrom:
            - configMapRef:
                name: harbor-chartmuseum
            - secretRef:
                name: harbor-chartmuseum
            image: goharbor/chartmuseum-photon:v0.9.0-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: chartmuseum
            ports:
            - containerPort: 9999
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /chart_storage
              name: chartmuseum-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: chartmuseum-data
    status:
      availableReplicas: 1
      conditions:
      - lastTransitionTime: "2020-04-27T20:40:03Z"
        lastUpdateTime: "2020-04-27T20:40:03Z"
        message: Deployment has minimum availability.
        reason: MinimumReplicasAvailable
        status: "True"
        type: Available
      - lastTransitionTime: "2020-04-27T20:39:53Z"
        lastUpdateTime: "2020-04-27T20:41:09Z"
        message: ReplicaSet "harbor-chartmuseum-54bd7fd995" has successfully progressed.
        reason: NewReplicaSetAvailable
        status: "True"
        type: Progressing
      observedGeneration: 4
      readyReplicas: 1
      replicas: 1
      updatedReplicas: 1
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "2"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:53Z"
      generation: 2
      labels:
        app: harbor
        component: clair
      name: harbor-clair
      namespace: harbor
      resourceVersion: "5296"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/deployments/harbor-clair
      uid: 88f68e3c-46dc-44b8-ae0b-7166f982a8eb
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: harbor
          component: clair
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: clair
        spec:
          containers:
          - args:
            - -log-level
            - warn
            env:
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            - name: STAKATER_HARBOR_CLAIR_SECRET
              value: a0730b0200d7696815d7081d8af36960d86d3084
            image: goharbor/clair-photon:v2.1.1-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 6061
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: clair
            ports:
            - containerPort: 6060
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 6061
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/clair/config.yaml
              name: config
              subPath: config.yaml
          - env:
            - name: SCANNER_CLAIR_URL
              value: http://127.0.0.1:6060
            - name: SCANNER_STORE_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redis
                  name: harbor-clair
            - name: SCANNER_CLAIR_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: database
                  name: harbor-clair
            - name: SCANNER_LOG_LEVEL
              value: warn
            image: goharbor/clair-adapter-photon:v1.0.1-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /probe/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: adapter
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /probe/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: config
            secret:
              defaultMode: 420
              secretName: harbor-clair
    status:
      availableReplicas: 1
      conditions:
      - lastTransitionTime: "2020-04-27T20:40:45Z"
        lastUpdateTime: "2020-04-27T20:40:45Z"
        message: Deployment has minimum availability.
        reason: MinimumReplicasAvailable
        status: "True"
        type: Available
      - lastTransitionTime: "2020-04-27T20:39:53Z"
        lastUpdateTime: "2020-04-27T20:41:33Z"
        message: ReplicaSet "harbor-clair-57d49f7bb9" has successfully progressed.
        reason: NewReplicaSetAvailable
        status: "True"
        type: Progressing
      observedGeneration: 2
      readyReplicas: 1
      replicas: 1
      updatedReplicas: 1
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "5"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:54Z"
      generation: 5
      labels:
        app: harbor
        component: core
      name: harbor-core
      namespace: harbor
      resourceVersion: "5241"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/deployments/harbor-core
      uid: 728ec57a-46b7-44c5-a027-e90eada3e4a2
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: harbor
          component: core
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: core
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_CORE_CONFIGMAP
              value: e283939a3f24fe072caeb777b04d567d4c50bb29
            - name: STAKATER_HARBOR_INGRESS_SECRET
              value: 656aac349b3f9b6002ac5bd50d567f5d59ac3cb1
            - name: STAKATER_HARBOR_JOBSERVICE_SECRET
              value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
            envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
            image: goharbor/harbor-core:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: core
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              items:
              - key: app.conf
                path: app.conf
              name: harbor-core
            name: config
          - name: secret-key
            secret:
              defaultMode: 420
              items:
              - key: secretKey
                path: key
              secretName: harbor-core
          - name: token-service-private-key
            secret:
              defaultMode: 420
              secretName: harbor-core
          - name: ca-download
            secret:
              defaultMode: 420
              secretName: harbor-ingress
          - emptyDir: {}
            name: psc
    status:
      availableReplicas: 1
      conditions:
      - lastTransitionTime: "2020-04-27T20:41:26Z"
        lastUpdateTime: "2020-04-27T20:41:26Z"
        message: Deployment has minimum availability.
        reason: MinimumReplicasAvailable
        status: "True"
        type: Available
      - lastTransitionTime: "2020-04-27T20:39:54Z"
        lastUpdateTime: "2020-04-27T20:41:27Z"
        message: ReplicaSet "harbor-core-69fc9d9868" has successfully progressed.
        reason: NewReplicaSetAvailable
        status: "True"
        type: Progressing
      observedGeneration: 5
      readyReplicas: 1
      replicas: 1
      updatedReplicas: 1
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "4"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:54Z"
      generation: 4
      labels:
        app: harbor
        component: jobservice
      name: harbor-jobservice
      namespace: harbor
      resourceVersion: "5885"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/deployments/harbor-jobservice
      uid: 5d56b966-bee8-49bc-8da3-9fc7834c0226
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: harbor
          component: jobservice
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: jobservice
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: CORE_URL
              value: http://harbor-core
            - name: REGISTRY_CONTROLLER_URL
              value: http://harbor-registry:8080
            - name: LOG_LEVEL
              value: warn
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_JOBSERVICE_CONFIGMAP
              value: da779fafea89ebd5639aa87e7c2c8214ca7db649
            - name: STAKATER_HARBOR_JOBSERVICE_SECRET
              value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
            image: goharbor/harbor-jobservice:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: jobservice
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/jobservice/config.yml
              name: jobservice-config
              subPath: config.yml
            - mountPath: /var/log/jobs
              name: job-logs
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              name: harbor-jobservice
            name: jobservice-config
          - emptyDir: {}
            name: job-logs
    status:
      availableReplicas: 1
      conditions:
      - lastTransitionTime: "2020-04-27T20:43:16Z"
        lastUpdateTime: "2020-04-27T20:43:16Z"
        message: Deployment has minimum availability.
        reason: MinimumReplicasAvailable
        status: "True"
        type: Available
      - lastTransitionTime: "2020-04-27T20:39:54Z"
        lastUpdateTime: "2020-04-27T20:43:18Z"
        message: ReplicaSet "harbor-jobservice-58484476cb" has successfully progressed.
        reason: NewReplicaSetAvailable
        status: "True"
        type: Progressing
      observedGeneration: 4
      readyReplicas: 1
      replicas: 1
      updatedReplicas: 1
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "1"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:55Z"
      generation: 1
      labels:
        app: harbor
        component: portal
      name: harbor-portal
      namespace: harbor
      resourceVersion: "3468"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/deployments/harbor-portal
      uid: 43c1d180-3902-4d3f-bd6b-b7bc8ea4bac1
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: harbor
          component: portal
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: portal
        spec:
          containers:
          - image: goharbor/harbor-portal:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: portal
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
    status:
      availableReplicas: 1
      conditions:
      - lastTransitionTime: "2020-04-27T20:40:13Z"
        lastUpdateTime: "2020-04-27T20:40:13Z"
        message: Deployment has minimum availability.
        reason: MinimumReplicasAvailable
        status: "True"
        type: Available
      - lastTransitionTime: "2020-04-27T20:39:55Z"
        lastUpdateTime: "2020-04-27T20:40:13Z"
        message: ReplicaSet "harbor-portal-6dbd9fcd57" has successfully progressed.
        reason: NewReplicaSetAvailable
        status: "True"
        type: Progressing
      observedGeneration: 1
      readyReplicas: 1
      replicas: 1
      updatedReplicas: 1
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "5"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:55Z"
      generation: 5
      labels:
        app: harbor
        component: registry
      name: harbor-registry
      namespace: harbor
      resourceVersion: "5049"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/deployments/harbor-registry
      uid: 57887682-a858-4cf8-b074-d3ecbfe97a05
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: harbor
          component: registry
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: registry
        spec:
          containers:
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_REGISTRY_CONFIGMAP
              value: a9d6a966a3cb00e2400f6e0797164310a1c0d17f
            - name: STAKATER_HARBOR_REGISTRY_SECRET
              value: 3bde361646c058ee555fc262793a2e0ec4367c0c
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registry
            ports:
            - containerPort: 5000
              protocol: TCP
            - containerPort: 5001
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/root.crt
              name: registry-root-certificate
              subPath: tls.crt
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_JOBSERVICE_SECRET
              value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/harbor-registryctl:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registryctl
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: registry-root-certificate
            secret:
              defaultMode: 420
              secretName: harbor-core
          - configMap:
              defaultMode: 420
              name: harbor-registry
            name: registry-config
          - emptyDir: {}
            name: registry-data
    status:
      availableReplicas: 1
      conditions:
      - lastTransitionTime: "2020-04-27T20:40:24Z"
        lastUpdateTime: "2020-04-27T20:40:24Z"
        message: Deployment has minimum availability.
        reason: MinimumReplicasAvailable
        status: "True"
        type: Available
      - lastTransitionTime: "2020-04-27T20:39:55Z"
        lastUpdateTime: "2020-04-27T20:41:13Z"
        message: ReplicaSet "harbor-registry-c98dbc647" has successfully progressed.
        reason: NewReplicaSetAvailable
        status: "True"
        type: Progressing
      observedGeneration: 5
      readyReplicas: 1
      replicas: 1
      updatedReplicas: 1
  metadata: {}
- items:
  - apiVersion: extensions/v1beta1
    kind: Ingress
    metadata:
      annotations:
        ingress.kubernetes.io/proxy-body-size: "0"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/tls-acme: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
      creationTimestamp: "2020-04-27T20:39:56Z"
      generation: 1
      labels:
        app: harbor
      name: harbor-ingress
      namespace: harbor
      resourceVersion: "3200"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/ingresses/harbor-ingress
      uid: 760712d7-3191-44e9-a8e6-0fa92610eeb5
    spec:
      rules:
      - host: harbor.127.0.0.1.nip.io
        http:
          paths:
          - backend:
              serviceName: harbor-portal
              servicePort: 80
            path: /
          - backend:
              serviceName: harbor-core
              servicePort: 80
            path: /api/
          - backend:
              serviceName: harbor-core
              servicePort: 80
            path: /service/
          - backend:
              serviceName: harbor-core
              servicePort: 80
            path: /v2/
          - backend:
              serviceName: harbor-core
              servicePort: 80
            path: /chartrepo/
          - backend:
              serviceName: harbor-core
              servicePort: 80
            path: /c/
      tls:
      - hosts:
        - harbor.127.0.0.1.nip.io
        secretName: harbor-ingress
    status:
      loadBalancer: {}
  metadata: {}
- items:
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "4"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:52Z"
      generation: 2
      labels:
        app: harbor
        component: chartmuseum
        pod-template-hash: 54bd7fd995
      name: harbor-chartmuseum-54bd7fd995
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-chartmuseum
        uid: d6eea940-c6ba-4780-879a-a361deb747a8
      resourceVersion: "4959"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-chartmuseum-54bd7fd995
      uid: 5dd37414-2f9d-493c-ade5-083ab0b1c8f5
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: harbor
          component: chartmuseum
          pod-template-hash: 54bd7fd995
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: chartmuseum
            pod-template-hash: 54bd7fd995
        spec:
          containers:
          - env:
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_CHARTMUSEUM_CONFIGMAP
              value: f9cec16a3657790c115495c79fcc2087012d2040
            - name: STAKATER_HARBOR_CHARTMUSEUM_SECRET
              value: 76ad3b4aa7177cb52d5e1377420a8488a40d713b
            envFrom:
            - configMapRef:
                name: harbor-chartmuseum
            - secretRef:
                name: harbor-chartmuseum
            image: goharbor/chartmuseum-photon:v0.9.0-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: chartmuseum
            ports:
            - containerPort: 9999
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /chart_storage
              name: chartmuseum-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: chartmuseum-data
    status:
      availableReplicas: 1
      fullyLabeledReplicas: 1
      observedGeneration: 2
      readyReplicas: 1
      replicas: 1
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "2"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:49Z"
      generation: 2
      labels:
        app: harbor
        component: chartmuseum
        pod-template-hash: 5767fb7559
      name: harbor-chartmuseum-5767fb7559
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-chartmuseum
        uid: d6eea940-c6ba-4780-879a-a361deb747a8
      resourceVersion: "4379"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-chartmuseum-5767fb7559
      uid: 23864755-b911-45fe-b9bd-887601559d64
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: chartmuseum
          pod-template-hash: 5767fb7559
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: chartmuseum
            pod-template-hash: 5767fb7559
        spec:
          containers:
          - env:
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            envFrom:
            - configMapRef:
                name: harbor-chartmuseum
            - secretRef:
                name: harbor-chartmuseum
            image: goharbor/chartmuseum-photon:v0.9.0-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: chartmuseum
            ports:
            - containerPort: 9999
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /chart_storage
              name: chartmuseum-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: chartmuseum-data
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "1"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:53Z"
      generation: 2
      labels:
        app: harbor
        component: chartmuseum
        pod-template-hash: 5c7c945479
      name: harbor-chartmuseum-5c7c945479
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-chartmuseum
        uid: d6eea940-c6ba-4780-879a-a361deb747a8
      resourceVersion: "4968"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-chartmuseum-5c7c945479
      uid: 7214d97d-ad76-4cc4-bdf3-e8c9d9193fd2
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: chartmuseum
          pod-template-hash: 5c7c945479
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: chartmuseum
            pod-template-hash: 5c7c945479
        spec:
          containers:
          - env:
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            envFrom:
            - configMapRef:
                name: harbor-chartmuseum
            - secretRef:
                name: harbor-chartmuseum
            image: goharbor/chartmuseum-photon:v0.9.0-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: chartmuseum
            ports:
            - containerPort: 9999
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /chart_storage
              name: chartmuseum-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: chartmuseum-data
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "3"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:50Z"
      generation: 3
      labels:
        app: harbor
        component: chartmuseum
        pod-template-hash: 69568c8dd8
      name: harbor-chartmuseum-69568c8dd8
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-chartmuseum
        uid: d6eea940-c6ba-4780-879a-a361deb747a8
      resourceVersion: "4554"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-chartmuseum-69568c8dd8
      uid: cdb14399-10b7-406e-945c-1ff541295d1a
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: chartmuseum
          pod-template-hash: 69568c8dd8
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: chartmuseum
            pod-template-hash: 69568c8dd8
        spec:
          containers:
          - env:
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_CHARTMUSEUM_CONFIGMAP
              value: f9cec16a3657790c115495c79fcc2087012d2040
            envFrom:
            - configMapRef:
                name: harbor-chartmuseum
            - secretRef:
                name: harbor-chartmuseum
            image: goharbor/chartmuseum-photon:v0.9.0-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: chartmuseum
            ports:
            - containerPort: 9999
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 9999
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /chart_storage
              name: chartmuseum-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: chartmuseum-data
    status:
      observedGeneration: 3
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "2"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:51Z"
      generation: 1
      labels:
        app: harbor
        component: clair
        pod-template-hash: 57d49f7bb9
      name: harbor-clair-57d49f7bb9
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-clair
        uid: 88f68e3c-46dc-44b8-ae0b-7166f982a8eb
      resourceVersion: "5284"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-clair-57d49f7bb9
      uid: e355fb9e-9c2a-42a5-8994-1d78230c6252
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: harbor
          component: clair
          pod-template-hash: 57d49f7bb9
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: clair
            pod-template-hash: 57d49f7bb9
        spec:
          containers:
          - args:
            - -log-level
            - warn
            env:
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            - name: STAKATER_HARBOR_CLAIR_SECRET
              value: a0730b0200d7696815d7081d8af36960d86d3084
            image: goharbor/clair-photon:v2.1.1-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 6061
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: clair
            ports:
            - containerPort: 6060
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 6061
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/clair/config.yaml
              name: config
              subPath: config.yaml
          - env:
            - name: SCANNER_CLAIR_URL
              value: http://127.0.0.1:6060
            - name: SCANNER_STORE_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redis
                  name: harbor-clair
            - name: SCANNER_CLAIR_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: database
                  name: harbor-clair
            - name: SCANNER_LOG_LEVEL
              value: warn
            image: goharbor/clair-adapter-photon:v1.0.1-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /probe/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: adapter
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /probe/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: config
            secret:
              defaultMode: 420
              secretName: harbor-clair
    status:
      availableReplicas: 1
      fullyLabeledReplicas: 1
      observedGeneration: 1
      readyReplicas: 1
      replicas: 1
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "1"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:53Z"
      generation: 2
      labels:
        app: harbor
        component: clair
        pod-template-hash: 7c4b8d964d
      name: harbor-clair-7c4b8d964d
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-clair
        uid: 88f68e3c-46dc-44b8-ae0b-7166f982a8eb
      resourceVersion: "5294"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-clair-7c4b8d964d
      uid: 6744fd8a-7b42-4b96-8ed0-6fa64c383bf3
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: clair
          pod-template-hash: 7c4b8d964d
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: clair
            pod-template-hash: 7c4b8d964d
        spec:
          containers:
          - args:
            - -log-level
            - warn
            env:
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            image: goharbor/clair-photon:v2.1.1-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 6061
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: clair
            ports:
            - containerPort: 6060
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 6061
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/clair/config.yaml
              name: config
              subPath: config.yaml
          - env:
            - name: SCANNER_CLAIR_URL
              value: http://127.0.0.1:6060
            - name: SCANNER_STORE_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redis
                  name: harbor-clair
            - name: SCANNER_CLAIR_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: database
                  name: harbor-clair
            - name: SCANNER_LOG_LEVEL
              value: warn
            image: goharbor/clair-adapter-photon:v1.0.1-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /probe/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: adapter
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /probe/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: config
            secret:
              defaultMode: 420
              secretName: harbor-clair
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "3"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:50Z"
      generation: 3
      labels:
        app: harbor
        component: core
        pod-template-hash: 66984fbf7
      name: harbor-core-66984fbf7
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-core
        uid: 728ec57a-46b7-44c5-a027-e90eada3e4a2
      resourceVersion: "5240"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-core-66984fbf7
      uid: 673d32cd-6525-4284-991c-f9e7e2b62f8a
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: core
          pod-template-hash: 66984fbf7
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: core
            pod-template-hash: 66984fbf7
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_CORE_CONFIGMAP
              value: e283939a3f24fe072caeb777b04d567d4c50bb29
            envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
            image: goharbor/harbor-core:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: core
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              items:
              - key: app.conf
                path: app.conf
              name: harbor-core
            name: config
          - name: secret-key
            secret:
              defaultMode: 420
              items:
              - key: secretKey
                path: key
              secretName: harbor-core
          - name: token-service-private-key
            secret:
              defaultMode: 420
              secretName: harbor-core
          - name: ca-download
            secret:
              defaultMode: 420
              secretName: harbor-ingress
          - emptyDir: {}
            name: psc
    status:
      observedGeneration: 3
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "4"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:51Z"
      generation: 1
      labels:
        app: harbor
        component: core
        pod-template-hash: 67b8c46fd9
      name: harbor-core-67b8c46fd9
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-core
        uid: 728ec57a-46b7-44c5-a027-e90eada3e4a2
      resourceVersion: "4477"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-core-67b8c46fd9
      uid: 73356906-c32e-4837-b3a7-aaebb923c3bc
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: core
          pod-template-hash: 67b8c46fd9
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: core
            pod-template-hash: 67b8c46fd9
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_CORE_CONFIGMAP
              value: e283939a3f24fe072caeb777b04d567d4c50bb29
            - name: STAKATER_HARBOR_INGRESS_SECRET
              value: 656aac349b3f9b6002ac5bd50d567f5d59ac3cb1
            envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
            image: goharbor/harbor-core:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: core
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              items:
              - key: app.conf
                path: app.conf
              name: harbor-core
            name: config
          - name: secret-key
            secret:
              defaultMode: 420
              items:
              - key: secretKey
                path: key
              secretName: harbor-core
          - name: token-service-private-key
            secret:
              defaultMode: 420
              secretName: harbor-core
          - name: ca-download
            secret:
              defaultMode: 420
              secretName: harbor-ingress
          - emptyDir: {}
            name: psc
    status:
      observedGeneration: 1
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "1"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:54Z"
      generation: 2
      labels:
        app: harbor
        component: core
        pod-template-hash: 67db5f485c
      name: harbor-core-67db5f485c
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-core
        uid: 728ec57a-46b7-44c5-a027-e90eada3e4a2
      resourceVersion: "4327"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-core-67db5f485c
      uid: 5a2a1f51-bbb7-4b56-9bec-4d64fe339a26
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: core
          pod-template-hash: 67db5f485c
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: core
            pod-template-hash: 67db5f485c
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
            image: goharbor/harbor-core:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: core
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              items:
              - key: app.conf
                path: app.conf
              name: harbor-core
            name: config
          - name: secret-key
            secret:
              defaultMode: 420
              items:
              - key: secretKey
                path: key
              secretName: harbor-core
          - name: token-service-private-key
            secret:
              defaultMode: 420
              secretName: harbor-core
          - name: ca-download
            secret:
              defaultMode: 420
              secretName: harbor-ingress
          - emptyDir: {}
            name: psc
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "5"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:52Z"
      generation: 2
      labels:
        app: harbor
        component: core
        pod-template-hash: 69fc9d9868
      name: harbor-core-69fc9d9868
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-core
        uid: 728ec57a-46b7-44c5-a027-e90eada3e4a2
      resourceVersion: "5231"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-core-69fc9d9868
      uid: 8b1784fb-d098-41ba-aee5-e96d055b091f
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: harbor
          component: core
          pod-template-hash: 69fc9d9868
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: core
            pod-template-hash: 69fc9d9868
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_CORE_CONFIGMAP
              value: e283939a3f24fe072caeb777b04d567d4c50bb29
            - name: STAKATER_HARBOR_INGRESS_SECRET
              value: 656aac349b3f9b6002ac5bd50d567f5d59ac3cb1
            - name: STAKATER_HARBOR_JOBSERVICE_SECRET
              value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
            envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
            image: goharbor/harbor-core:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: core
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              items:
              - key: app.conf
                path: app.conf
              name: harbor-core
            name: config
          - name: secret-key
            secret:
              defaultMode: 420
              items:
              - key: secretKey
                path: key
              secretName: harbor-core
          - name: token-service-private-key
            secret:
              defaultMode: 420
              secretName: harbor-core
          - name: ca-download
            secret:
              defaultMode: 420
              secretName: harbor-ingress
          - emptyDir: {}
            name: psc
    status:
      availableReplicas: 1
      fullyLabeledReplicas: 1
      observedGeneration: 2
      readyReplicas: 1
      replicas: 1
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "2"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:49Z"
      generation: 2
      labels:
        app: harbor
        component: core
        pod-template-hash: 754b5d7d65
      name: harbor-core-754b5d7d65
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-core
        uid: 728ec57a-46b7-44c5-a027-e90eada3e4a2
      resourceVersion: "4586"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-core-754b5d7d65
      uid: 35e2c852-1395-4bb5-9859-c388c0daa534
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: core
          pod-template-hash: 754b5d7d65
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: core
            pod-template-hash: 754b5d7d65
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
            image: goharbor/harbor-core:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: core
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/ping
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              items:
              - key: app.conf
                path: app.conf
              name: harbor-core
            name: config
          - name: secret-key
            secret:
              defaultMode: 420
              items:
              - key: secretKey
                path: key
              secretName: harbor-core
          - name: token-service-private-key
            secret:
              defaultMode: 420
              secretName: harbor-core
          - name: ca-download
            secret:
              defaultMode: 420
              secretName: harbor-ingress
          - emptyDir: {}
            name: psc
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "4"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:52Z"
      generation: 2
      labels:
        app: harbor
        component: jobservice
        pod-template-hash: 58484476cb
      name: harbor-jobservice-58484476cb
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-jobservice
        uid: 5d56b966-bee8-49bc-8da3-9fc7834c0226
      resourceVersion: "5874"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-jobservice-58484476cb
      uid: c081b255-820e-4c82-a742-abcfcee8171a
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: harbor
          component: jobservice
          pod-template-hash: 58484476cb
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: jobservice
            pod-template-hash: 58484476cb
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: CORE_URL
              value: http://harbor-core
            - name: REGISTRY_CONTROLLER_URL
              value: http://harbor-registry:8080
            - name: LOG_LEVEL
              value: warn
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_JOBSERVICE_CONFIGMAP
              value: da779fafea89ebd5639aa87e7c2c8214ca7db649
            - name: STAKATER_HARBOR_JOBSERVICE_SECRET
              value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
            image: goharbor/harbor-jobservice:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: jobservice
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/jobservice/config.yml
              name: jobservice-config
              subPath: config.yml
            - mountPath: /var/log/jobs
              name: job-logs
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              name: harbor-jobservice
            name: jobservice-config
          - emptyDir: {}
            name: job-logs
    status:
      availableReplicas: 1
      fullyLabeledReplicas: 1
      observedGeneration: 2
      readyReplicas: 1
      replicas: 1
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "2"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:49Z"
      generation: 2
      labels:
        app: harbor
        component: jobservice
        pod-template-hash: 776cc785b8
      name: harbor-jobservice-776cc785b8
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-jobservice
        uid: 5d56b966-bee8-49bc-8da3-9fc7834c0226
      resourceVersion: "4539"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-jobservice-776cc785b8
      uid: 28384101-1f41-4792-b659-ee6b81085a76
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: jobservice
          pod-template-hash: 776cc785b8
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: jobservice
            pod-template-hash: 776cc785b8
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: CORE_URL
              value: http://harbor-core
            - name: REGISTRY_CONTROLLER_URL
              value: http://harbor-registry:8080
            - name: LOG_LEVEL
              value: warn
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            image: goharbor/harbor-jobservice:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: jobservice
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/jobservice/config.yml
              name: jobservice-config
              subPath: config.yml
            - mountPath: /var/log/jobs
              name: job-logs
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              name: harbor-jobservice
            name: jobservice-config
          - emptyDir: {}
            name: job-logs
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "1"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:54Z"
      generation: 2
      labels:
        app: harbor
        component: jobservice
        pod-template-hash: 79d5dcb5b8
      name: harbor-jobservice-79d5dcb5b8
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-jobservice
        uid: 5d56b966-bee8-49bc-8da3-9fc7834c0226
      resourceVersion: "4366"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-jobservice-79d5dcb5b8
      uid: f420d138-e4a5-4e91-8dbd-839bf8428590
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: jobservice
          pod-template-hash: 79d5dcb5b8
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: jobservice
            pod-template-hash: 79d5dcb5b8
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: CORE_URL
              value: http://harbor-core
            - name: REGISTRY_CONTROLLER_URL
              value: http://harbor-registry:8080
            - name: LOG_LEVEL
              value: warn
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            image: goharbor/harbor-jobservice:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: jobservice
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/jobservice/config.yml
              name: jobservice-config
              subPath: config.yml
            - mountPath: /var/log/jobs
              name: job-logs
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              name: harbor-jobservice
            name: jobservice-config
          - emptyDir: {}
            name: job-logs
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "3"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:50Z"
      generation: 3
      labels:
        app: harbor
        component: jobservice
        pod-template-hash: 7bf98c7c9
      name: harbor-jobservice-7bf98c7c9
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-jobservice
        uid: 5d56b966-bee8-49bc-8da3-9fc7834c0226
      resourceVersion: "5884"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-jobservice-7bf98c7c9
      uid: 38225793-5c43-4375-baec-b8c190a784d8
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: jobservice
          pod-template-hash: 7bf98c7c9
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: jobservice
            pod-template-hash: 7bf98c7c9
        spec:
          containers:
          - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: CORE_URL
              value: http://harbor-core
            - name: REGISTRY_CONTROLLER_URL
              value: http://harbor-registry:8080
            - name: LOG_LEVEL
              value: warn
            - name: HTTP_PROXY
            - name: HTTPS_PROXY
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_JOBSERVICE_CONFIGMAP
              value: da779fafea89ebd5639aa87e7c2c8214ca7db649
            image: goharbor/harbor-jobservice:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: jobservice
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/v1/stats
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/jobservice/config.yml
              name: jobservice-config
              subPath: config.yml
            - mountPath: /var/log/jobs
              name: job-logs
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              name: harbor-jobservice
            name: jobservice-config
          - emptyDir: {}
            name: job-logs
    status:
      observedGeneration: 3
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "1"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:55Z"
      generation: 1
      labels:
        app: harbor
        component: portal
        pod-template-hash: 6dbd9fcd57
      name: harbor-portal-6dbd9fcd57
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-portal
        uid: 43c1d180-3902-4d3f-bd6b-b7bc8ea4bac1
      resourceVersion: "3466"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-portal-6dbd9fcd57
      uid: 446828f2-9767-42b4-8d97-6b2ebd06fbc7
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: harbor
          component: portal
          pod-template-hash: 6dbd9fcd57
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: portal
            pod-template-hash: 6dbd9fcd57
        spec:
          containers:
          - image: goharbor/harbor-portal:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: portal
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
    status:
      availableReplicas: 1
      fullyLabeledReplicas: 1
      observedGeneration: 1
      readyReplicas: 1
      replicas: 1
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "3"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:50Z"
      generation: 3
      labels:
        app: harbor
        component: registry
        pod-template-hash: 5464446f6c
      name: harbor-registry-5464446f6c
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-registry
        uid: 57887682-a858-4cf8-b074-d3ecbfe97a05
      resourceVersion: "4668"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-registry-5464446f6c
      uid: 45b80fd8-75ff-4a29-af8f-66be53fc8ab6
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: registry
          pod-template-hash: 5464446f6c
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: registry
            pod-template-hash: 5464446f6c
        spec:
          containers:
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_REGISTRY_CONFIGMAP
              value: a9d6a966a3cb00e2400f6e0797164310a1c0d17f
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registry
            ports:
            - containerPort: 5000
              protocol: TCP
            - containerPort: 5001
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/root.crt
              name: registry-root-certificate
              subPath: tls.crt
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/harbor-registryctl:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registryctl
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: registry-root-certificate
            secret:
              defaultMode: 420
              secretName: harbor-core
          - configMap:
              defaultMode: 420
              name: harbor-registry
            name: registry-config
          - emptyDir: {}
            name: registry-data
    status:
      observedGeneration: 3
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "1"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:39:55Z"
      generation: 2
      labels:
        app: harbor
        component: registry
        pod-template-hash: 586657484d
      name: harbor-registry-586657484d
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-registry
        uid: 57887682-a858-4cf8-b074-d3ecbfe97a05
      resourceVersion: "5048"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-registry-586657484d
      uid: b87f78c9-2261-4aca-89b8-5a61daee00cb
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: registry
          pod-template-hash: 586657484d
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: registry
            pod-template-hash: 586657484d
        spec:
          containers:
          - args:
            - serve
            - /etc/registry/config.yml
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registry
            ports:
            - containerPort: 5000
              protocol: TCP
            - containerPort: 5001
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/root.crt
              name: registry-root-certificate
              subPath: tls.crt
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/harbor-registryctl:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registryctl
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: registry-root-certificate
            secret:
              defaultMode: 420
              secretName: harbor-core
          - configMap:
              defaultMode: 420
              name: harbor-registry
            name: registry-config
          - emptyDir: {}
            name: registry-data
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "4"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:52Z"
      generation: 1
      labels:
        app: harbor
        component: registry
        pod-template-hash: 6dbc88bfb8
      name: harbor-registry-6dbc88bfb8
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-registry
        uid: 57887682-a858-4cf8-b074-d3ecbfe97a05
      resourceVersion: "4509"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-registry-6dbc88bfb8
      uid: 85e10bc3-eeed-428d-b533-3020b7407d41
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: registry
          pod-template-hash: 6dbc88bfb8
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: registry
            pod-template-hash: 6dbc88bfb8
        spec:
          containers:
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_REGISTRY_CONFIGMAP
              value: a9d6a966a3cb00e2400f6e0797164310a1c0d17f
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registry
            ports:
            - containerPort: 5000
              protocol: TCP
            - containerPort: 5001
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/root.crt
              name: registry-root-certificate
              subPath: tls.crt
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_JOBSERVICE_SECRET
              value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/harbor-registryctl:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registryctl
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: registry-root-certificate
            secret:
              defaultMode: 420
              secretName: harbor-core
          - configMap:
              defaultMode: 420
              name: harbor-registry
            name: registry-config
          - emptyDir: {}
            name: registry-data
    status:
      observedGeneration: 1
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "2"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:49Z"
      generation: 2
      labels:
        app: harbor
        component: registry
        pod-template-hash: 844b574bdf
      name: harbor-registry-844b574bdf
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-registry
        uid: 57887682-a858-4cf8-b074-d3ecbfe97a05
      resourceVersion: "4396"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-registry-844b574bdf
      uid: d91e8198-19fc-4ee9-86ef-6efb28670855
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: harbor
          component: registry
          pod-template-hash: 844b574bdf
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: registry
            pod-template-hash: 844b574bdf
        spec:
          containers:
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registry
            ports:
            - containerPort: 5000
              protocol: TCP
            - containerPort: 5001
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/root.crt
              name: registry-root-certificate
              subPath: tls.crt
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/harbor-registryctl:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registryctl
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: registry-root-certificate
            secret:
              defaultMode: 420
              secretName: harbor-core
          - configMap:
              defaultMode: 420
              name: harbor-registry
            name: registry-config
          - emptyDir: {}
            name: registry-data
    status:
      observedGeneration: 2
      replicas: 0
  - apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: "1"
        deployment.kubernetes.io/max-replicas: "2"
        deployment.kubernetes.io/revision: "5"
        reload/all: "true"
      creationTimestamp: "2020-04-27T20:40:53Z"
      generation: 2
      labels:
        app: harbor
        component: registry
        pod-template-hash: c98dbc647
      name: harbor-registry-c98dbc647
      namespace: harbor
      ownerReferences:
      - apiVersion: apps/v1
        blockOwnerDeletion: true
        controller: true
        kind: Deployment
        name: harbor-registry
        uid: 57887682-a858-4cf8-b074-d3ecbfe97a05
      resourceVersion: "5038"
      selfLink: /apis/extensions/v1beta1/namespaces/harbor/replicasets/harbor-registry-c98dbc647
      uid: 31975279-ed67-439b-ab4b-435a0f951e76
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: harbor
          component: registry
          pod-template-hash: c98dbc647
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: harbor
            component: registry
            pod-template-hash: c98dbc647
        spec:
          containers:
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: STAKATER_HARBOR_CORE_SECRET
              value: ee2385b419ef903c7c84cdbfc22c17ad696dcdb8
            - name: STAKATER_HARBOR_REGISTRY_CONFIGMAP
              value: a9d6a966a3cb00e2400f6e0797164310a1c0d17f
            - name: STAKATER_HARBOR_REGISTRY_SECRET
              value: 3bde361646c058ee555fc262793a2e0ec4367c0c
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registry
            ports:
            - containerPort: 5000
              protocol: TCP
            - containerPort: 5001
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/root.crt
              name: registry-root-certificate
              subPath: tls.crt
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
          - args:
            - serve
            - /etc/registry/config.yml
            env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
            - name: STAKATER_HARBOR_JOBSERVICE_SECRET
              value: ac52489e3d13271a6b9054f7557fa4b5180b90b3
            envFrom:
            - secretRef:
                name: harbor-registry
            image: goharbor/harbor-registryctl:v1.10.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 300
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: registryctl
            ports:
            - containerPort: 8080
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 1
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 10000
          terminationGracePeriodSeconds: 30
          volumes:
          - name: registry-root-certificate
            secret:
              defaultMode: 420
              secretName: harbor-core
          - configMap:
              defaultMode: 420
              name: harbor-registry
            name: registry-config
          - emptyDir: {}
            name: registry-data
    status:
      availableReplicas: 1
      fullyLabeledReplicas: 1
      observedGeneration: 2
      readyReplicas: 1
      replicas: 1
  metadata: {}
- items:
  - apiVersion: metrics.k8s.io/v1beta1
    containers:
    - name: redis
      usage:
        cpu: 2m
        memory: 6160Ki
    kind: PodMetrics
    metadata:
      creationTimestamp: "2020-04-27T20:46:07Z"
      name: harbor-redis-0
      namespace: harbor
      selfLink: /apis/metrics.k8s.io/v1beta1/namespaces/harbor/pods/harbor-redis-0
    timestamp: "2020-04-27T20:46:07Z"
    window: 5m0s
  - apiVersion: metrics.k8s.io/v1beta1
    containers:
    - name: core
      usage:
        cpu: 2m
        memory: 29136Ki
    kind: PodMetrics
    metadata:
      creationTimestamp: "2020-04-27T20:46:07Z"
      name: harbor-core-69fc9d9868-vcwjm
      namespace: harbor
      selfLink: /apis/metrics.k8s.io/v1beta1/namespaces/harbor/pods/harbor-core-69fc9d9868-vcwjm
    timestamp: "2020-04-27T20:46:07Z"
    window: 5m0s
  - apiVersion: metrics.k8s.io/v1beta1
    containers:
    - name: clair
      usage:
        cpu: "0"
        memory: 9056Ki
    - name: adapter
      usage:
        cpu: "0"
        memory: 13488Ki
    kind: PodMetrics
    metadata:
      creationTimestamp: "2020-04-27T20:46:07Z"
      name: harbor-clair-57d49f7bb9-9frw2
      namespace: harbor
      selfLink: /apis/metrics.k8s.io/v1beta1/namespaces/harbor/pods/harbor-clair-57d49f7bb9-9frw2
    timestamp: "2020-04-27T20:46:07Z"
    window: 5m0s
  - apiVersion: metrics.k8s.io/v1beta1
    containers:
    - name: chartmuseum
      usage:
        cpu: "0"
        memory: 13016Ki
    kind: PodMetrics
    metadata:
      creationTimestamp: "2020-04-27T20:46:07Z"
      name: harbor-chartmuseum-54bd7fd995-dfk9b
      namespace: harbor
      selfLink: /apis/metrics.k8s.io/v1beta1/namespaces/harbor/pods/harbor-chartmuseum-54bd7fd995-dfk9b
    timestamp: "2020-04-27T20:46:07Z"
    window: 5m0s
  - apiVersion: metrics.k8s.io/v1beta1
    containers:
    - name: portal
      usage:
        cpu: "0"
        memory: 15160Ki
    kind: PodMetrics
    metadata:
      creationTimestamp: "2020-04-27T20:46:07Z"
      name: harbor-portal-6dbd9fcd57-k5kf7
      namespace: harbor
      selfLink: /apis/metrics.k8s.io/v1beta1/namespaces/harbor/pods/harbor-portal-6dbd9fcd57-k5kf7
    timestamp: "2020-04-27T20:46:07Z"
    window: 5m0s
  - apiVersion: metrics.k8s.io/v1beta1
    containers:
    - name: registry
      usage:
        cpu: 1m
        memory: 19992Ki
    - name: registryctl
      usage:
        cpu: "0"
        memory: 7816Ki
    kind: PodMetrics
    metadata:
      creationTimestamp: "2020-04-27T20:46:07Z"
      name: harbor-registry-c98dbc647-l22dg
      namespace: harbor
      selfLink: /apis/metrics.k8s.io/v1beta1/namespaces/harbor/pods/harbor-registry-c98dbc647-l22dg
    timestamp: "2020-04-27T20:46:07Z"
    window: 5m0s
  - apiVersion: metrics.k8s.io/v1beta1
    containers:
    - name: jobservice
      usage:
        cpu: 1m
        memory: 18528Ki
    kind: PodMetrics
    metadata:
      creationTimestamp: "2020-04-27T20:46:07Z"
      name: harbor-jobservice-58484476cb-9tvlv
      namespace: harbor
      selfLink: /apis/metrics.k8s.io/v1beta1/namespaces/harbor/pods/harbor-jobservice-58484476cb-9tvlv
    timestamp: "2020-04-27T20:46:07Z"
    window: 5m0s
  metadata: {}
- items:
  - apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      creationTimestamp: "2020-04-27T20:39:53Z"
      generation: 1
      labels:
        app: harbor
        component: registry
      name: harbor-registry
      namespace: harbor
      resourceVersion: "3068"
      selfLink: /apis/monitoring.coreos.com/v1/namespaces/harbor/servicemonitors/harbor-registry
      uid: 2b474d89-d312-45cc-a4f5-514c6c22f211
    spec:
      endpoints:
      - honorLabels: true
        interval: 10s
        path: /metrics
        port: metrics
      jobLabel: harbor-registry
      namespaceSelector:
        matchNames:
        - harbor
      selector:
        matchLabels:
          app: harbor
          component: registry
  metadata: {}
- items:
  - apiVersion: networking.k8s.io/v1beta1
    kind: Ingress
    metadata:
      annotations:
        ingress.kubernetes.io/proxy-body-size: "0"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/tls-acme: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
      creationTimestamp: "2020-04-27T20:39:56Z"
      generation: 1
      labels:
        app: harbor
      name: harbor-ingress
      namespace: harbor
      resourceVersion: "3200"
      selfLink: /apis/networking.k8s.io/v1beta1/namespaces/harbor/ingresses/harbor-ingress
      uid: 760712d7-3191-44e9-a8e6-0fa92610eeb5
    spec:
      rules:
      - host: harbor.127.0.0.1.nip.io
        http:
          paths:
          - backend:
              serviceName: harbor-portal
              servicePort: 80
            path: /
          - backend:
              serviceName: harbor-core
              servicePort: 80
            path: /api/
          - backend:
              serviceName: harbor-core
              servicePort: 80
            path: /service/
          - backend:
              serviceName: harbor-core
              servicePort: 80
            path: /v2/
          - backend:
              serviceName: harbor-core
              servicePort: 80
            path: /chartrepo/
          - backend:
              serviceName: harbor-core
              servicePort: 80
            path: /c/
      tls:
      - hosts:
        - harbor.127.0.0.1.nip.io
        secretName: harbor-ingress
    status:
      loadBalancer: {}
  metadata: {}
kind: List
metadata: {}
